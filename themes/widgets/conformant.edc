/*
 * efl-theme-tizen
 * Copyright (c) 2012-2013 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/////////////////////////////////////////////////////////////////////////////
 group { name: "elm/conformant/base/default";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.clipboard";
           }
           description { state: "disable_clipboard" 0.0;
              inherit: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.virtualkeypad";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.clipboard";
           }
           description { state: "overlap" 0.0;
              inherit: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 0.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.clipboard";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "access"; type: RECT;
           repeat_events: 1;
           description { state: "default" 0.0;
             fixed: 1 1;
             rel1 { relative: 0.9 0.0; to: "elm.swallow.indicator"; }
             rel2 { relative: 1.0 1.0; to: "elm.swallow.indicator"; }
             color: 0 0 0 0;
             visible: 0;
           }
           description { state: "visible" 0.0;
              inherit: "default" 0.0;
              visible: 1;
           }
        }
        part { name: "elm.swallow.clipboard";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 0.0;
              rel1.to_y: "elm.swallow.virtualkeypad";
              rel2.relative: 1.0 0.0;
              rel2.to_y: "elm.swallow.virtualkeypad";
           }
        }
        part { name: "elm.swallow.virtualkeypad";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "overlap_indicator";
            signal: "elm,state,indicator,overlap";
            source: "";
            script {
               set_state(PART:"elm.swallow.ug", "overlap", 0.0);
            }
        }
        program {
            name: "nooverlap_indicator";
            signal: "elm,state,indicator,nooverlap";
            source: "";
            script {
               set_state(PART:"elm.swallow.ug", "default", 0.0);
            }
        }
         program { name: "access_on";
            signal: "elm,state,access,on";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "access";
         }
         program { name: "access_off";
            signal: "elm,state,access,off";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "access";
         }
         program { name: "enable_clipboard";
            signal: "elm,state,clipboard,enable";
            source: "";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "disable_clipboard";
            signal: "elm,state,clipboard,disable";
            source: "";
            action: STATE_SET "disable_clipboard" 0.0;
            target: "elm.swallow.content";
         }
     }
  }
 group { name: "elm/conformant/base/indicator_overlap";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.clipboard";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "elm.swallow.clipboard";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.clipboard";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 0.0;
              rel1.to_y: "elm.swallow.virtualkeypad";
              rel2.relative: 1.0 0.0;
              rel2.to_y: "elm.swallow.virtualkeypad";
           }
        }
        part { name: "elm.swallow.virtualkeypad";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
     }
  }

  group { name: "elm/conformant/base/nokeypad";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
     }
  }
