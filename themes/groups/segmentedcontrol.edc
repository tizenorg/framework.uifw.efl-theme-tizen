/*
 *  nBeat-theme
 *
 * Copyright (c) 2000 - 2010 Samsung Electronics Co., Ltd.
 *
 * Contact: Seokjae Jeong <seok.j.jeong@samsung.com>, Myoungwoon Roy Kim <Myoungwoon.kim@samsung.com>, Jeonghyun Yun <jh0506.yun@samsung.com>, Jaehwan Kim <jae.hwan.kim@samsung.com>, 
 * 		Chuneon Park <chuneon.park@samsung.com>, Juyung Seo <juyung.seo@samsung.com>, Woohyun Jung <wh0705.jung@samsung.com>, Myungjae Lee <mjae.lee@samsung.com>, Hyoyoung Chang <hyoyoung.chang@samsung.com>, 
 *		Hyunsil Park <hyunsil.park@samsung.com>, Sohyun Kim <anna1014.kim@samsung.com>, Seunggyun Kim <sgyun.kim@samsung.com>
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */


//################################################################
//Segmented Control
//################################################################

group { name: "elm/segmented-control/base/default";	
   styles{
      style { name: "seg_btn_textblock_style";
	 base: "font=SLP:style=Medium font_size=24 style=shadow \
	 shadow_color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_STYLE_COLOR_NORMAL_INC" \
	 align=center \
	 color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_STYLE_COLOR_NORMAL_INC" wrap=char";
	 tag:  "br" "\n";
	 tag:  "hilight" "+ font=SLP:style=Bold";
	 tag:  "b" "+ font=SLP:style=Bold";
	 tag:  "tab" "\t";
      }
      style { name: "seg_btn_textblock_style1";
	 base: "font=SLP:style=Medium font_size=24 style=shadow \
	 shadow_color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_STYLE_COLOR_NORMAL_INC" \
	 align=center \
	 color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_STYLE_COLOR_PRESSED_INC" wrap=char";
	 tag:  "br" "\n";
	 tag:  "hilight" "+ font=SLP:style=Bold";
	 tag:  "b" "+ font=SLP:style=Bold";
	 tag:  "tab" "\t";
      }
      style { name: "seg_btn_textblock_style2";
	 base: "font=SLP:style=Medium font_size=24 style=shadow \
	 shadow_color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_STYLE_COLOR_SELECTED_INC" \
	 align=center color="SEGMENT_CONTROL_ITEM_TITLE_TEXT_STYLE_COLOR_SELECTED_INC" \
	 wrap=char";
	 tag:  "br" "\n";
	 tag:  "hilight" "+ font=SLP:style=Bold";
	 tag:  "b" "+ font=SLP:style=Bold";
	 tag:  "tab" "\t";
      }
   }
   data.item: "default_font_size" "24";
   data.item: "w_pad" "4";
   data.item: "h_pad" "6";
   data.item: "max_height" "50";           
   data.item: "def_rgb" SEGMENT_CONTROL_ITEM_LABEL_TEXT_COLOR_NORMAL_INC;
   data.item: "press_rgb" SEGMENT_CONTROL_ITEM_LABEL_TEXT_COLOR_PRESS_INC;
   data.item: "sel_rgb" SEGMENT_CONTROL_ITEM_LABEL_TEXT_COLOR_SELECT_INC;

   parts {
      part { name: "bg";
         type: RECT;
	 mouse_events: 0;
	 scale: 1;
	 description {
	    state: "default" 0.0;
	    min: 166 20;
            max: 467 SEGMENT_H;
            fixed: 0 0;
            rel1 {relative: 0.0  0.0;}
	    rel2 {relative: 1.0  1.0;}
	    color: 0 255 0 0;
	 }
      }
      part { name: "elm.padding.left";
         type: RECT;
	 mouse_events: 0;
	 scale: 1;
	 description {
	    state: "default" 0.0;
	    min: 1 1;
	    max: 1 1;
	    fixed: 1 0;
	    rel1 {relative: 0.0  0.0; to: "bg";}
	    rel2 {relative: 0.0  1.0; to: "bg";}
	    color: 0 0 255 0;
	    align: 0.0 0.0;
	 }
      }
      part { name: "elm.padding.right";
	 type: RECT;
	 mouse_events: 0;
	 scale: 1;
	 description {
            state: "default" 0.0;
	    min: 1 1;
	    max: 1 1;
	    fixed: 1 0;
	    rel1 {relative: 1.0  0.0; to: "bg";}
	    rel2 {relative: 1.0  1.0; to: "bg";}
	    color:  0 0 255 0;
	    align: 1.0 0.0;
	 }
      }
      part { name: "elm.padding.top";
	 type: RECT;
	 mouse_events: 0;
	 scale: 1;
	 description {
            state: "default" 0.0;
	    min: 0 1;
	    max: 1 1;
	    fixed: 1 0;
	    rel1 {relative: 0.0  0.0; to: "bg";}
	    rel2 {relative: 0.0  1.0; to: "bg";}
	    color: 0 0 255 0;
	    align: 0.0 0.0;
	 }
      }
      part { name: "elm.padding.bottom";
         type: RECT;
	 mouse_events: 0;
	 scale: 1;
	 description {
            state: "default" 0.0;
	    min: 0 1;
	    max: 1 1;
	    fixed: 1 0;
	    rel1 {relative: 1.0  0.0; to: "bg";}
	    rel2 {relative: 1.0  1.0; to: "bg";}
	    color:  0 0 255 0;
	    align: 0.0 1.0;
	 }
      }
      part { name: "elm.swallow.content";
	 type: SWALLOW;
	 scale: 1;
	 description {
        	state: "default" 0.0;
		fixed: 0 0;
		min: 164 20;
		max: 467 SEGMENT_H;
		rel1 {relative: 1.0  1.0; to_x: "elm.padding.left";to_y: "elm.padding.top";}
		rel2 {relative: 0.0  0.0; to_x: "elm.padding.right";to_y: "elm.padding.bottom";}
		align: 0.5 0.5;
	 }
      }
   }
}
group { name: "elm/segment/base/default/default";
   images {
      image: "00_winset_btn_sge_press_center.png" COMP;
      image: "00_winset_btn_sge_focus_centre.png" COMP;
      image: "00_winset_btn_sge_normal_centre.png" COMP;
   }
   parts {
     part { name: "segment";
	 mouse_events: 1;
	 scale: 1;
	 description {
	    state: "default" 0.0;
	    min: 1 1;
	    max: 467 SEGMENT_H;
	    image {
	       normal: "00_winset_btn_sge_normal_centre.png";
	       border: 7 7 7 7;
	       border_scale: 1;
	       middle: 1;
 	    }
         }
	 description {
	    state: "selected" 0.0;
	    inherit: "default" 0.0;
	    image {
               normal: "00_winset_btn_sge_press_center.png";
	       border: 1 1 2 2;
	       border_scale: 1;
               middle: 1;
	    }
	 }
      }
      part { name: "focus_segment";
	 scale: 1;
	 description {
            state: "default" 0.0;
	    visible: 0;
	    min: 1 1;
	    max: 467 SEGMENT_H;
	 }
	 description {
	    state: "focused" 0.0;
	    inherit: "default" 0.0;
	    visible: 1;
	    image {
	       normal: "00_winset_btn_sge_focus_centre.png";
	       border: 1 1 2 2;
	       border_scale: 1;
	       middle: 1;
	    }
	 }
      }		  
      part {
         name: "elm.swallow.label.content";
	 type: SWALLOW;
	 scale: 1;
	 description {
	    state: "default" 0.0;
	    fixed: 0 1;
	    visible: 0;
	    align: 0.5 0.5;
	    min: 1 1;
	    max: 467 48;
	    rel1 {relative: 0.0  0.5; to: "segment";}
	    rel2 {relative: 1.0  0.5; to: "segment";}
	 }
	 description {
	    state: "visible" 0.0;
            inherit: "default" 0.0;
	    visible: 1;
	    fixed: 1 1;
	    aspect: 0.6 0.6;
	    aspect_preference: VERTICAL;
	 }
      }		  
      part { name: "padding_left";
         type: RECT;
	 scale: 1;
	 mouse_events: 0;
	 description { state: "default" 0.0;
	    align: 0.0 0.0;
	    rel1.relative: 0.0 0.0;
	    rel2.relative: 0.0 1.0;
            min: 2 2;
	    fixed: 1 0;
            color: 0 0 0 0;
	  }
      }
      part { name: "padding_right";
         type: RECT;
	 scale: 1;
	 mouse_events: 0;
	 description { state: "default" 0.0;
	    align: 1.0 0.0;
	    rel1.relative: 1.0 0.0;
	    rel2.relative: 1.0 1.0;
            min: 2 2;
	    fixed: 1 0;
	    color: 0 0 0 0;
	 }
      }
      part { name: "padding_top";
         type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			visible: 1;
			min: 40 40;
			rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			align: 0.5 0.5;
			aspect: 1.0 1.0;
			aspect_preference: VERTICAL;
	     }
	  }
	  part { name: "elm.text";
		 type: TEXTBLOCK;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			text {
			   style: "seg_btn_textblock_style";
			   min: 0 1;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style1";
			   min: 0 1;
			}				
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style2";
			   min: 0 1;
			}				
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }
	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}
group { name: "elm/segment/base/default/ellipsis";
   images {
	  image: "00_winset_btn_sge_press_center.png" COMP;
	  image: "00_winset_btn_sge_focus_centre.png" COMP;
	  image: "00_winset_btn_sge_normal_centre.png" COMP;
   }
   parts {
	  part { name: "segment";
		 mouse_events: 1;
		 scale: 1;
		 description {
			state: "default" 0.0;
			min: 1 1;
			max: 467 SEGMENT_H;
			image {
		      normal: "00_winset_btn_sge_normal_centre.png";
			  border: 7 7 7 7;
			  border_scale: 1;
			  middle: 1;
		   }
	     }
	     description {
		   state: "selected" 0.0;
		   inherit: "default" 0.0;
		   image {
			  normal: "00_winset_btn_sge_press_center.png";
			  border: 1 1 2 2;
			  border_scale: 1;
			  middle: 1;
		   }
	    }
      }
	  part { name: "focus_segment";
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			min: 1 1;
			max: 467 SEGMENT_H;
	     }
		 description {
			state: "focused" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			image {
			   normal: "00_winset_btn_sge_focus_centre.png";
			   border: 1 1 2 2;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }		  
	  part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 0 1;
			visible: 0;
			align: 0.5 0.5;
			min: 1 1;
			max: 467 48;
			rel1 {relative: 0.0  0.5; to: "segment";}
			rel2 {relative: 1.0  0.5; to: "segment";}
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }		  
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			visible: 1;
			min: 40 40;
			rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			align: 0.5 0.5;
			aspect: 1.0 1.0;
			aspect_preference: VERTICAL;
	     }
	  }
	  part { name: "elm.text";
		 type: TEXT;
		 effect: SHADOW;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_NORMAL_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_NORMAL_INC;
			text {
				font: "SLP:style=Medium";
				size: 24;
				min:  0 0;
				align: 0.5 0.5;
				max: 1 0;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_PRESSED_INC;
			min: 1 1;
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_SELECTED_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_SELECTED_INC;
			min: 1 1;
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }
	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}	
group {name: "elm/segment/base/first/default";
   images {
      image: "00_winset_btn_sge_press_left.png" COMP;
	  image: "00_winset_btn_sge_focus_left.png" COMP;
	  image: "00_winset_btn_sge_normal_left.png" COMP;
   }
   parts {
	  part {
		 name: "segment";
		 mouse_events: 1;
		 scale: 1;
		 description {
			state: "default" 0.0;
			min: 1 1;
			max: 467 SEGMENT_H;
			image {
			   normal: "00_winset_btn_sge_normal_left.png";
			   border: 6 1 7 7;
			   border_scale: 1;
			   middle: 1;
			}
		 }
		 description {
			state: "selected" 0.0;
			inherit: "default" 0.0;
			image {
			   normal: "00_winset_btn_sge_press_left.png";
			   border: 6 1 0 0;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }
	  part { name: "focus_segment";
		 scale: 1;
		 description {
		 state: "default" 0.0;
			min: 1 1;
			visible: 0;
			max: 467 SEGMENT_H;
		 }
		 description {
			state: "focused" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			image {
			   normal: "00_winset_btn_sge_focus_left.png";
			   border: 6 1 0 0;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }		  
	  part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 0 1;
			visible: 0;
		    align: 0.5 0.5;
			min: 1 1;
			max: 467 48;
			rel1 {relative: 0.0  0.5; to: "segment";}
			rel2 {relative: 1.0  0.5; to: "segment";}
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
		  
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			  visible: 1;
			  min: 40 40;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			  align: 0.5 0.5;
			  aspect: 1.0 1.0;
			  aspect_preference: VERTICAL;
	      }
	  }
	  part { name: "elm.text";
		 type: TEXTBLOCK;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			text {
			   style: "seg_btn_textblock_style";
			   min: 0 1;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style1";
			   min: 0 1;
			}				
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style2";
			   min: 0 1;
		    }
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }

	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}
group {name: "elm/segment/base/first/ellipsis";
   images {
   image: "00_winset_btn_sge_press_left.png" COMP;
   image: "00_winset_btn_sge_focus_left.png" COMP;
   image: "00_winset_btn_sge_normal_left.png" COMP;
   }
   parts {
	  part {
		 name: "segment";
		 mouse_events: 1;
		 scale: 1;
		 description {
			state: "default" 0.0;
			min: 1 1;
			max: 467 SEGMENT_H;
			image {
			   normal: "00_winset_btn_sge_normal_left.png";
			   border: 6 1 7 7;
			   border_scale: 1;
			   middle: 1;
			}
		 }
		 description {
			state: "selected" 0.0;
			inherit: "default" 0.0;
			image {
			   normal: "00_winset_btn_sge_press_left.png";
			   border: 6 1 0 0;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }
	  part { name: "focus_segment";
		 scale: 1;
		 description {
		 state: "default" 0.0;
			min: 1 1;
			visible: 0;
			max: 467 SEGMENT_H;
		 }
		 description {
			state: "focused" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			image {
			   normal: "00_winset_btn_sge_focus_left.png";
			   border: 6 1 0 0;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }		  
	  part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 0 1;
			visible: 0;
		    align: 0.5 0.5;
			min: 1 1;
			max: 467 48;
			rel1 {relative: 0.0  0.5; to: "segment";}
			rel2 {relative: 1.0  0.5; to: "segment";}
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			  visible: 1;
			  min: 40 40;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			  align: 0.5 0.5;
			  aspect: 1.0 1.0;
			  aspect_preference: VERTICAL;
	      }
	  }
	  part { name: "elm.text";
		 type: TEXT;
		 effect: SHADOW;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_NORMAL_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_NORMAL_INC;
			text {
				font: "SLP:style=Medium";
				size: 24;
				min:  0 0;
				align: 0.5 0.5;
				max: 1 0;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_PRESSED_INC;
			min: 1 1;
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_SELECTED_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_SELECTED_INC;
			min: 1 1;
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }

	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}
group { name: "elm/segment/base/last/default";
   images {
	  image: "00_winset_btn_sge_press_right.png" COMP;
	  image: "00_winset_btn_sge_focus_right.png" COMP;
	  image: "00_winset_btn_sge_normal_right.png" COMP;
   }
   parts {
	  part {
	  name: "segment";
	  mouse_events: 1;
	  scale: 1;
	  description {
		 state: "default" 0.0;
		 min: 1 1;
		 max: 467 SEGMENT_H;
		 image {
			normal: "00_winset_btn_sge_normal_right.png";
			border: 1 6 7 7;
			border_scale: 1;
			middle: 1;
		 }
	  }
	  description {
		 state: "selected" 0.0;
		 inherit: "default" 0.0;
		 image {
			normal: "00_winset_btn_sge_press_right.png";
			border: 1 6 0 0;
			border_scale: 1;
			middle: 1;
		 }
	  }
   }
   part { name: "focus_segment";
	  scale: 1;
	  description {
		 state: "default" 0.0;
		 visible: 0;
		 min: 1 1;
		 max: 467 SEGMENT_H;
	  }
	  description {
		 state: "focused" 0.0;
		 inherit: "default" 0.0;
		 visible: 1;
		 image {
			normal: "00_winset_btn_sge_focus_right.png";
			border: 1 6 0 0;
			border_scale: 1;
			middle: 1;
		 }
	  }
   }
   
   part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 0 1;
			visible: 0;
			align: 0.5 0.5;
			min: 1 1;
			max: 467 48;
			rel1 {relative: 0.0  0.5; to: "segment";}
			rel2 {relative: 1.0  0.5; to: "segment";}
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "defaultvisible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			visible: 1;
			min: 40 40;
			rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			align: 0.5 0.5;
			aspect: 1.0 1.0;
			aspect_preference: VERTICAL;
	     }
	  }
	  part { name: "elm.text";
		 type: TEXTBLOCK;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			text {
			   style: "seg_btn_textblock_style";
			   min: 0 1;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style1";
			   min: 0 1;
			}				
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style2";
			   min: 0 1;
		    }
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }

	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}
group { name: "elm/segment/base/last/ellipsis";
   images {
	  image: "00_winset_btn_sge_press_right.png" COMP;
	  image: "00_winset_btn_sge_focus_right.png" COMP;
	  image: "00_winset_btn_sge_normal_right.png" COMP;
   }
   parts {
	  part {
	  name: "segment";
	  mouse_events: 1;
	  scale: 1;
	  description {
		 state: "default" 0.0;
		 min: 1 1;
		 max: 467 SEGMENT_H;
		 image {
			normal: "00_winset_btn_sge_normal_right.png";
			border: 1 6 7 7;
			border_scale: 1;
			middle: 1;
		 }
	  }
	  description {
		 state: "selected" 0.0;
		 inherit: "default" 0.0;
		 image {
			normal: "00_winset_btn_sge_press_right.png";
			border: 1 6 0 0;
			border_scale: 1;
			middle: 1;
		 }
	  }
   }
   part { name: "focus_segment";
	  scale: 1;
	  description {
		 state: "default" 0.0;
		 visible: 0;
		 min: 1 1;
		 max: 467 SEGMENT_H;
	  }
	  description {
		 state: "focused" 0.0;
		 inherit: "default" 0.0;
		 visible: 1;
		 image {
			normal: "00_winset_btn_sge_focus_right.png";
			border: 1 6 0 0;
			border_scale: 1;
			middle: 1;
		 }
	  }
   }	   
   part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 0 1;
			visible: 0;
			align: 0.5 0.5;
			min: 1 1;
			max: 467 48;
			rel1 {relative: 0.0  0.5; to: "segment";}
			rel2 {relative: 1.0  0.5; to: "segment";}
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			visible: 1;
			min: 40 40;
			rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			align: 0.5 0.5;
			aspect: 1.0 1.0;
			aspect_preference: VERTICAL;
	     }
	  }
	  part { name: "elm.text";
		 type: TEXT;
		 effect: SHADOW;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_NORMAL_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_NORMAL_INC;
			text {
				font: "SLP:style=Medium";
				size: 24;
				min:  0 0;
				align: 0.5 0.5;
				max: 1 0;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_PRESSED_INC;
			min: 1 1;
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_SELECTED_INC;
			color2: SEGMENT_CONTROL_ITEM_TITLE_TEXT_SHADOW_COLOR_SELECTED_INC;
			min: 1 1;
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }

	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
	  program {
		 name: "focused";
		 signal: "elm,action,focus";
		 source: "elm";
		 action: STATE_SET "focused" 0.0;
		 target: "focus_segment";
	  }
	  program { name: "unfocused";
		 signal: "elm,action,unfocus";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "focus_segment";
	  }
   }
}	
group { name: "elm/segment/base/single/default";
   images {
	  image: "00_button_02_normal.png" COMP;
	  image: "00_button_popup_focus.png" COMP;
	  image: "00_winset_btn_sge_normal.png" COMP;
   }
   parts {
	  part {
		 name: "segment";
		 mouse_events: 1;
		 scale: 1;
		 description {
			state: "default" 0.0;
			min: 1 1;
			max: 467 SEGMENT_H;
			image {
			   normal: "00_winset_btn_sge_normal.png";
			   border: 7 7 7 7;
			   border_scale: 1;
			   middle: 1;
			}
		 }
		 description {
			state: "selected" 0.0;
			inherit: "default" 0.0;
			image {
			   normal: "00_button_popup_focus.png";
			   border: 7 7 7 7;
			   border_scale: 1;
			   middle: 1;
			}
		 }
	  }	  
	  part {
		 name: "elm.swallow.label.content";
		 type: SWALLOW;
		 scale: 1;
		 description {
			state: "default" 0.0;
			fixed: 1 0;
			visible: 0;
			align: 0.5 0.5;
		 }
		 description {
			state: "visible" 0.0;
			inherit: "default" 0.0;
			fixed: 1 1;
			visible: 1;
			aspect: 0.6 0.6;
			aspect_preference: VERTICAL;
		 }
	  }
	  part { name: "padding_left";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 0.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_right";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 0.0;
			  rel1.relative: 1.0 0.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 1 0;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_top";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 0.0 0.0;
			  rel1.relative: 0.0 0.0;
			  rel2.relative: 1.0 0.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "padding_bottom";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  align: 1.0 1.0;
			  rel1.relative: 0.0 1.0;
			  rel2.relative: 1.0 1.0;
			  min: 2 2;
			  fixed: 0 1;
			  color: 0 0 0 0;
		  }
	  }
	  part { name: "icon_rect";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0;
			  visible: 1;
			  min: 0 40;
			  fixed: 1 0;
			  rel1 {relative: 0.0 1.0; to_x: "elm.swallow.content"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "elm.swallow.content"; to_y: "padding_bottom"; }
			  align: 0.0 0.5;
			  color: 0 0 0 0;
		  }
	  } 
	  part { name: "padding_icon_text";
		  type: RECT;
		  scale: 1;
		  mouse_events: 0;
		  description { state: "default" 0.0; //when only icon or no icon is there
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 0 0;
			  color: 0 0 0 0;
		  }
		  description { state: "icononly" 0.0;
			  inherit: "default" 0.0;
		  }
		  description { state: "visible" 0.0; //when icon is visible
			  align: 0.0 0.0;
			  rel1 { relative: 1.0 0.0; to: "icon_rect"; }
			  rel2 { relative: 1.0 1.0; to: "icon_rect"; } 			
			  fixed: 1 0;
			  min: 5 0;
			  color: 0 0 0 0;
		  }
	  }					
	  part { name: "elm.swallow.content";
		  type: SWALLOW;
		  scale: 1;
		  description { state: "default" 0.0;
			  visible: 0;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  fixed: 1 0;
		  }
		  description { state: "visible" 0.0;
			  fixed: 1 0;
			  visible: 1;
			  align: 0.0 0.5;
			  rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			  rel2 {relative: 1.0 0.0; to_x: "padding_left"; to_y: "padding_bottom"; }
			  aspect: 1.0 1.0;
		  	  aspect_preference: VERTICAL;
		  }
		  description { state: "icononly" 0.0;;
			visible: 1;
			min: 40 40;
			rel1 {relative: 1.0 1.0; to_x: "padding_left"; to_y: "padding_top"; }
			rel2 {relative: 0.0 0.0; to_x: "padding_right"; to_y: "padding_bottom"; }
			align: 0.5 0.5;
			aspect: 1.0 1.0;
			aspect_preference: VERTICAL;
	     }
	  }
	  part { name: "elm.text";
		 type: TEXTBLOCK;
		 mouse_events: 0;
		 scale: 1;
		 description {
			state: "default" 0.0;
			visible: 0;
			fixed: 1 1;
			min: 1 1;
			max: 467 48;
			align: 0.5 0.5;
			rel1 { relative: 1.0 1.0; to_x: "padding_icon_text";}
			rel2 { relative: 0.0 0.0; to_x: "padding_right";}
			text {
			   style: "seg_btn_textblock_style";
			   min: 0 1;
			}
		 }
		 description { state: "visible" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		 }
		 description { state: "pressed" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style1";
			   min: 0 1;
			}				
		 }
		 description { state: "selected" 0.0;
			inherit: "default" 0.0;
			visible: 1;
			min: 1 1;
		    text {
			   style: "seg_btn_textblock_style2";
			   min: 0 1;
		    }
		 }
	  }
   }
   programs {
	  program {
		 name: "segment_pressed";
		 signal: "elm,state,segment,press";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "segment";
	  }
	  program {
		 name: "segment_released";
		 signal: "elm,state,segment,release";
		 source: "elm";
		 action: STATE_SET "default" 0.0;
		 target: "segment";
		 after: "text_hide";
	  }
	  program {
		 name: "text_change";
		 signal: "elm,state,text,change";
		 source: "elm";
		 action: STATE_SET "selected" 0.0;
		 target: "elm.text";
	  }
	  program {
		 name: "text_pressed";
		 signal: "elm,state,text,pressed";
		 source: "elm";
		 action: STATE_SET "pressed" 0.0;
		 target: "elm.text";
	  }		  
	  program { name: "text_show";
		 signal: "elm,state,text,visible";
		 source: "elm";
		 script {
			new st[31];
			new Float:vl;
			new st1[31];
			new Float:vl1;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			get_state(PART:"elm.text", st1, 30, vl1);
			if (!strcmp(st, "icononly"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			if(!strcmp(st1, "selected"))
			{
			   set_state(PART:"elm.text", "selected", 0.0);
			}
			else if(!strcmp(st1, "pressed"))
			   set_state(PART:"elm.text", "pressed", 0.0);
			else
			   set_state(PART:"elm.text", "visible", 0.0);
		 }

	  }	
	  program { name: "text_hide";
		  signal: "elm,state,text,hidden";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.swallow.content", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
			set_state(PART:"elm.text", "default", 0.0);
		}
	  }
	  program { name: "icon_show";
		  signal: "elm,state,icon,visible";
		  source: "elm";
		  script {
			new st[31];
			new Float:vl;
			get_state(PART:"elm.text", st, 30, vl);
			if (!strcmp(st, "visible"))
			{
				set_state(PART:"elm.swallow.content", "visible", 0.0);
				set_state(PART:"padding_icon_text", "visible", 0.0);
			}
			else
			{
				set_state(PART:"elm.swallow.content", "icononly", 0.0);
				set_state(PART:"padding_icon_text", "icononly", 0.0);
			}
		 }
	  }
	  program { name: "icon_hide";
		 signal: "elm,state,icon,hidden";
		 source: "elm";
		 action:  STATE_SET "default" 0.0;
		 target: "elm.swallow.content";
	  }		  	  
	  program {
		 name: "label_show";
		 signal: "elm,state,label,visible";
		 source: "elm";
		 action: STATE_SET "visible" 0.0;
		 target: "elm.swallow.label.content";
	  }
   }
}
group { name: "elm/label/base/segment";
  data.item: "default_font_size" "24";
  data.item: "min_font_size" "16";
  data.item: "max_font_size" "24";
  parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
	    }
     }
	 part { name: "label.text.clip";
		type: RECT;
	    description { state: "default" 0.0;
		   visible: 1;
		   color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_PRESSED_INC;
		   rel1 { relative: 0 0; to: "label.swallow.background"; }
		   rel2 { relative: 1 1; to: "label.swallow.background"; }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    effect: SHADOW;
	    mouse_events: 0;
	    scale: 1;
	    clip_to: "label.text.clip";
	    description { state: "default" 0.0;
			rel1.relative, 0.0 0.0;
			rel2.relative, 1.0 1.0;
			align: 0.0 0.5;
			text {
				style: "seg_btn_textblock_style";
				align: 0.0 0.5;
				min: 1 0;
			}
	    }
		description { state: "pressed" 0.0;
		   inherit: "default" 0.0;
		   text {
			  style: "seg_btn_textblock_style1";
			  min: 1 0;
		   }
	    }
	    description { state: "selected" 0.0;
		   inherit: "default" 0.0;
		   text {
			  style: "seg_btn_textblock_style2";
			  min: 1 0;
		   }
	    }
	 }
   }
}
