/*
 *  nBeat-theme
 *
 * Copyright (c) 2000 - 2010 Samsung Electronics Co., Ltd.
 *
 * Contact: Seokjae Jeong <seok.j.jeong@samsung.com>, Myoungwoon Roy Kim <Myoungwoon.kim@samsung.com>, Jeonghyun Yun <jh0506.yun@samsung.com>, Jaehwan Kim <jae.hwan.kim@samsung.com>, 
 * 		Chuneon Park <chuneon.park@samsung.com>, Juyung Seo <juyung.seo@samsung.com>, Woohyun Jung <wh0705.jung@samsung.com>, Myungjae Lee <mjae.lee@samsung.com>, Hyoyoung Chang <hyoyoung.chang@samsung.com>, 
 *		Hyunsil Park <hyunsil.park@samsung.com>, Sohyun Kim <anna1014.kim@samsung.com>, Seunggyun Kim <sgyun.kim@samsung.com>
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

/*         
 * vim:ts=3
*/        
 
   group { name: "elm/genlist/item/slide_two/default";
      alias: "elm/genlist/item_odd/slide_two/default";
      alias: "elm/genlist/item_compress/slide_two/default";
      alias: "elm/genlist/item_compress_odd/slide_two/default";

      data.item: "stacking" "above";
      data.item: "selectraise" "on";
      data.item: "labels" "elm.base.text elm.slide_base.text";
      data.item: "icons" "elm.base.swallow.button1 elm.base.swallow.button2";
      data.item: "treesize" "20";
      data.item: "allow_slide" "1";

      images {
         image: "00_sweep_list_bg.png" COMP;
      }

      parts {
         // Base parts when slide right.
         part { name: "base";
            clip_to: "disclip";
            scale: 1;
            description { state: "default" 0.0;
               min: 0 80;
               image.normal: "00_sweep_list_bg.png";
            }
         }
         part { name: "bottom_line";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            description { state: "default" 0.0;
               min: 0 1;
               fixed: 0 1;
               visible: 1;
               color: 212 212 212 255;
               rel1 {
                  relative: 0.0 1.0;
                  offset: 0 -1;
                  to: "base";
               }
               rel2.to: "base";
            }
         }
         part { name: "base.padding.left";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 15 0;
               fixed: 1 0;
               visible: 0;
               rel1.to: "base";
               rel2 {
                  relative: 0 1;
                  to: "base";
               }
            }
         }
         part { name: "base.padding.right";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 15 0;
               fixed: 1 0;
               visible: 0;
               rel1 {
                  relative: 1 0;
                  to: "base";
               }
               rel2.to: "base";
            }
         }
         part { name: "base.padding.bottom";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 2;
               fixed: 0 1;
               visible: 0;
               align: 0.5 1;
               rel1 {
                  relative: 0 1;
                  to: "base";
               }
               rel2 {
                  relative: 1 1;
                  to: "base";
               }
            }
         }
         part { name: "elm.base.text";
            type: TEXT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 36;
               fixed: 0 1;
               align: 0.5 0;
               rel1 {
                  relative: 1 0;
                  to_x: "base.padding.left";
                  to_y: "base";
               }
               rel2 {
                  relative: 0 0;
                  to_x: "base.padding.right";
                  to_y: "base";
               }
               color: 255 255 255 255;
               text {
                  font: "SLP:style=Roman";
                  size: 22;
                  min: 0 1;
                  align: 0.5 0.5;
               }
            }
         }
         part { name: "base.padding.center";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 10 0;
               fixed: 1 0;
               visible: 0;
               align: 0.5 0.5;
               rel1 {
                  relative: 0.5 0;
                  to: "base";
               }
               rel2 {
                  relative: 0.5 1;
                  to: "base";
               }
            }
         }
         part { name: "elm.base.swallow.button1";
            type: SWALLOW;
            clip_to: "disclip";
            description { state: "default" 0.0;
               rel1 {
                  relative: 1 1;
                  to_x: "base.padding.left";
                  to_y: "elm.base.text";
               }
               rel2 {
                  relative: 0 0;
                  to_x: "base.padding.center";
                  to_y: "base.padding.bottom";
               }
            }
         }
         part { name: "elm.base.swallow.button2";
            type: SWALLOW;
            clip_to: "disclip";
            description { state: "default" 0.0;
               rel1 {
                  relative: 1 1;
                  to_x: "base.padding.center";
                  to_y: "elm.base.text";
               }
               rel2 {
                  relative: 0 0;
                  to_x: "base.padding.right";
                  to_y: "base.padding.bottom";
               }
            }
         }

         // Transparent part between base parts and slidable parts.
         part { name: "elm.between.layer";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 0 0 0 0;
            }
            description { state: "repeat_events" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }

         // Slidable parts.
         part { name: "slide_base";
            type: RECT;
            clip_to: "disclip";
            scale: 1;
            description { state: "default" 0.0;
               color: 246 245 237 255;
               rel1.to: "base";
               rel2.to: "base";
            }
            description { state: "hide" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.025 0.0; }
               rel2 { relative: 1.025 1.0; }
            }
            description { state: "hide" 0.1; 
               inherit: "default" 0.0;
               rel1 { relative: 0.13 0.0; }
               rel2 { relative: 1.13 1.0; }
            }
            description { state: "hide" 0.2;
               inherit: "default" 0.0;
               rel1 { relative: 0.5 0.0; }
               rel2 { relative: 1.5 1.0; }
            }
            description { state: "hide" 0.3;
               inherit: "default" 0.0;
               rel1 { relative: 1.0 0.0; }
               rel2 { relative: 2.0 1.0; }
            }
         }
         part { name: "slide_base.bg_image";
            clip_to: "disclip";
            description { state: "default" 0.0;
               visible: 0;
               image.normal: "00_list_bar_press_1x80.png";
               rel1.to: "slide_base";
               rel2.to: "slide_base";
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "slide_bottom_line";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            description { state: "default" 0.0;
               min: 0 1;
               fixed: 0 1;
               visible: 1;
               color: 212 212 212 255;
               rel1 {
                  relative: 0.0 1.0;
                  offset: 0 -1;
                  to: "slide_base";
               }
               rel2.to: "slide_base";
            }
         }
         part { name: "slide_base.padding.left";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 15 0;
               fixed: 1 0;
               visible: 0;
               rel1.to: "slide_base";
               rel2 {
                  relative: 0 1;
                  to: "slide_base";
               }
            }
         }
         part { name: "slide_base.padding.right";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               min: 15 0;
               fixed: 1 0;
               visible: 0;
               rel1 {
                  relative: 1 0;
                  to: "slide_base";
               }
               rel2.to: "slide_base";
            }
         }
         part { name: "elm.slide_base.text";
            type: TEXT;
            clip_to: "disclip";
            mouse_events: 0;
            description { state: "default" 0.0;
               align: 0 0.5;
               rel1 {
                  relative: 1 0;
                  to_x: "slide_base.padding.left";
                  to_y: "slide_base";
               }
               rel2 {
                  relative: 0 1;
                  to_x: "slide_base.padding.right";
                  to_y: "slide_base";
               }
               color: 0 0 0 255;
               text {
                  font: "SLP:style=Roman";
                  size: 32;
                  min: 0 1;
                  align: 0 0.5;
               }
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               color: 225 225 225 255;
            }
         }
         part { name: "disclip";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 64;
            }
         }
      }

      programs {
         // Basic programs 
         program { name: "go_active";
            signal: "elm,state,selected";
            source: "elm";
            action: STATE_SET "selected" 0.0;
            target: "elm.slide_base.text";
            target: "slide_base.bg_image";
         }
         program { name: "go_passive";
            signal: "elm,state,unselected";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.slide_base.text";
            target: "slide_base.bg_image";
            transition: LINEAR 0.1;
         }
         program { name: "go_disabled";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disclip";
         }
         program { name: "go_enabled";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disclip";
         }

         // Slide right
         program { name: "go_slide_right";
            signal: "elm,state,slide,right";
            source: "elm";
            action: STATE_SET "hide" 0.0;
            target: "slide_base";
            after: "slide_right_step1";
         }
         program { name: "slide_right_step1";
            action: STATE_SET "hide" 0.1;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_right_step2";
         }
         program { name: "slide_right_step2";
            action: STATE_SET "hide" 0.2;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_right_step3";
         }
         program { name: "slide_right_step3";
            action: STATE_SET "hide" 0.3;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_right_step4";
         }
         program { name: "slide_right_step4";
            action: STATE_SET "repeat_events" 0.0;
            target: "elm.between.layer";
         }

         // Slide left
         program { name: "go_slide_left";
            signal: "elm,state,slide,left";
            source: "elm";
            action: STATE_SET "hide" 0.3;
            target: "slide_base";
            after: "slide_left_step1";
         }
         program { name: "slide_left_step1";
            action: STATE_SET "default" 0.0;
            target: "elm.between.layer";
            after: "slide_left_step2";
         }
         program { name: "slide_left_step2";
            action: STATE_SET "hide" 0.2;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_left_step3";
         }
         program { name: "slide_left_step3";
            action: STATE_SET "hide" 0.1;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_left_step4";
         }
         program { name: "slide_left_step4";
            action: STATE_SET "hide" 0.0;
            target: "slide_base";
            transition: LINEAR 0.3;
            after: "slide_left_step5";
         }
         program { name: "slide_left_step5";
            action: STATE_SET "default" 0.0;
            target: "slide_base";
            transition: LINEAR 0.3;
         }
      }
   }

// DEMO
// TODO: need to refactor
#define  FLIPPING_DELAY    0.01
   group { name: "elm/genlist/item/flip_item/default";
      alias: "elm/genlist/item_odd/flip_item/default";

   /* 'images' are inserted for demo only. These should be removed after demo... */
   /* ----> */
   images {
      image: "btn_normal.png" COMP;
      image: "btn_selected.png" COMP;

      image: "item_flip_01.png" COMP;
      image: "item_flip_02.png" COMP;
      image: "item_flip_03.png" COMP;
      image: "item_flip_04.png" COMP;
      image: "item_flip_05.png" COMP;
      image: "item_flip_06.png" COMP;
      image: "item_flip_07.png" COMP;
      image: "item_flip_08.png" COMP;
      image: "item_flip_09.png" COMP;
      image: "item_flip_10.png" COMP;
      image: "item_flip_11.png" COMP;
      image: "item_flip_12.png" COMP;
      image: "item_flip_13.png" COMP;
      image: "item_flip_14.png" COMP;
      image: "item_flip_15.png" COMP;
      image: "item_flip_16.png" COMP;
      image: "item_flip_17.png" COMP;
      image: "item_flip_18.png" COMP;
      image: "item_flip_19.png" COMP;
      image: "item_flip_20.png" COMP;
   }
   /* <---- */

      data.item: "stacking" "above";
      data.item: "selectraise" "on";
      data.item: "labels" "elm.text";
      data.item: "treesize" "20";
      data.item: "allow_slide" "1";
      parts {
         BEAT_GENLIST_PART_BASE( 87 )

         /* PART_BUTTONS are inserted for demo only. These should be removed after demo... */
         /* ----> */
         BEAT_GENLIST_PART_BUTTON( btn_left, btn_text_left, "Call", 0.05, 0.31, 0.15, 0.85 )
         BEAT_GENLIST_PART_BUTTON( btn_mid, btn_text_mid, "Message", 0.37, 0.63, 0.15, 0.85 )
         BEAT_GENLIST_PART_BUTTON( btn_right, btn_text_right, "Email", 0.69, 0.95, 0.15, 0.85 )
         /* <---- */


         part { name: "bg";
               mouse_events: 0;
               scale: 1;
               description { state: "default" 0.0;
               rel1 { relative: 0.0 0.0; }
               rel2 { relative: 1.0 1.0; to_y: base; }
                     visible: 1;
               fixed: 0 1;
               min: 0 348;
               align: 0.0 1.0;
                     image {
                     normal: "item_flip_01.png";
                     }
               }
               description {
                   state: "hide" 0.0;
                   inherit: "default" 0.0;
                   visible: 0;
               }
            DESC_FLIP_IMAGE( 0.01, item_flip_01.png )
            DESC_FLIP_IMAGE( 0.02, item_flip_02.png )
            DESC_FLIP_IMAGE( 0.03, item_flip_03.png )
            DESC_FLIP_IMAGE( 0.04, item_flip_04.png )
            DESC_FLIP_IMAGE( 0.05, item_flip_05.png )
            DESC_FLIP_IMAGE( 0.06, item_flip_06.png )
            DESC_FLIP_IMAGE( 0.07, item_flip_07.png )
            DESC_FLIP_IMAGE( 0.08, item_flip_08.png )
            DESC_FLIP_IMAGE( 0.09, item_flip_09.png )
            DESC_FLIP_IMAGE( 0.10, item_flip_10.png )
            DESC_FLIP_IMAGE( 0.11, item_flip_11.png )
            DESC_FLIP_IMAGE( 0.12, item_flip_12.png )
            DESC_FLIP_IMAGE( 0.13, item_flip_13.png )
            DESC_FLIP_IMAGE( 0.14, item_flip_14.png )
            DESC_FLIP_IMAGE( 0.15, item_flip_15.png )
            DESC_FLIP_IMAGE( 0.16, item_flip_16.png )
            DESC_FLIP_IMAGE( 0.17, item_flip_17.png )
            DESC_FLIP_IMAGE( 0.18, item_flip_18.png )
            DESC_FLIP_IMAGE( 0.19, item_flip_19.png )
            DESC_FLIP_IMAGE( 0.20, item_flip_20.png )

            }


         part { name: "bottom_line";
            type: RECT;
            clip_to: "disclip";
            mouse_events: 0;
            description { state: "default" 0.0;
               min: 0 2;
               fixed: 0 1;
               visible: 1;
                     color: 212 212 212 255;
               rel1 {
                  relative: 0.0 1.0;
                  offset: 0 -1;
               }
            }
          }

         BEAT_GENLIST_PART_PADDING_LEFT_SLIDE( 16 )
         BEAT_GENLIST_PART_PADDING_RIGHT( 16 )


         part { name: "elm.text";
            clip_to: "disclip";
            type: TEXT;
            mouse_events:   0;
            scale: 1;
            description {
               state: "default" 0.0;
               rel1 {
                 to_x: "elm.padding.left";
                 to_y: "base";
                 relative: 1.0  0.0;
                 offset:   0    0;
               }
               rel2 {
                 to_x: "elm.padding.right";
                 to_y: "base";
                 relative: 0.0  1.0;
                 offset:   0   0;
               }
               color: 0 0 0 255;
               color3: 0 0 0 0;
               text {
                 font: "SLP:style=Roman";
                 size: 32;
                 min: 0 1;
                 align: 0.0 0.5;
               }
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 255;
               color3: 0 0 0 64;
            }
            DESC_TEXT_HIDE( 0.01 )
            DESC_TEXT_HIDE( 0.02 )
            DESC_TEXT_HIDE( 0.03 )
            DESC_TEXT_HIDE( 0.04 )
            DESC_TEXT_HIDE( 0.05 )
            DESC_TEXT_HIDE( 0.06 )
            DESC_TEXT_HIDE( 0.07 )
            DESC_TEXT_HIDE( 0.08 )
            DESC_TEXT_HIDE( 0.09 )
            DESC_TEXT_HIDE( 0.10 )
            DESC_TEXT_HIDE( 0.11 )
            DESC_TEXT_HIDE( 0.12 )
            DESC_TEXT_HIDE( 0.13 )
            DESC_TEXT_HIDE( 0.14 )
            DESC_TEXT_HIDE( 0.15 )
            DESC_TEXT_HIDE( 0.16 )
            DESC_TEXT_HIDE( 0.17 )
            DESC_TEXT_HIDE( 0.18 )
            DESC_TEXT_HIDE( 0.19 )
            DESC_TEXT_HIDE( 0.20 )
         }

         BEAT_GENLIST_PART_DISCLIP
      }

      programs {
         script {
            public flipping_state;
            public inc_value;
         }
         // signal: elm,state,%s,active
         //   a "check" item named %s went active
         // signal: elm,state,%s,passive
         //   a "check" item named %s went passive
         // default is passive
         program {
            name:    "go_active";
            signal:  "elm,state,selected";
            source:  "elm";
            action:  STATE_SET "selected" 0.0;
            target:  "bg";
            target:  "elm.text";
         }
         program {
            name:    "go_passive";
            signal:  "elm,state,unselected";
            source:  "elm";
            action:  STATE_SET "default" 0.0;
            target:  "bg";
            target:  "elm.text";
            transition: LINEAR 0.1;
         }
         program {
            name:    "go_disabled";
            signal:  "elm,state,disabled";
            source:  "elm";
            action:  STATE_SET "disabled" 0.0;
            target:  "disclip";
         }
         program {
            name:    "go_enabled";
            signal:  "elm,state,enabled";
            source:  "elm";
            action:  STATE_SET "default" 0.0;
            target:  "disclip";
         }

         /*
         program {
            name:    "go_slide_left";
            signal:  "elm,state,slide,left";
            source:  "elm";
            action:  STATE_SET "hide" 0.0;
            target:  "bg";
            after:    "hide_step1";
         }
         program {
            name:    "go_slide_right";
            signal:  "elm,state,slide,right";
            source:  "elm";
            action:  STATE_SET "hide" 0.3;
            target:  "bg";
            after:    "show_step1";
         }
         */

         BEAT_GENLIST_PROGRAM_SLIDE_WITH_AFTER( hide_step1, 0.1, hide_step2 )
         BEAT_GENLIST_PROGRAM_SLIDE_WITH_AFTER( hide_step2, 0.2, hide_step3 )
         BEAT_GENLIST_PROGRAM_SLIDE( hide_step3, "hide", 0.3 )

         BEAT_GENLIST_PROGRAM_SLIDE_WITH_AFTER( show_step1, 0.2, show_step2 )
         BEAT_GENLIST_PROGRAM_SLIDE_WITH_AFTER( show_step2, 0.1, show_step3 )
         BEAT_GENLIST_PROGRAM_SLIDE_WITH_AFTER( show_step3, 0.0, show_step4 )
         BEAT_GENLIST_PROGRAM_SLIDE( show_step4, "default", 0.0 )

         /* PROGRAM_BUTTONS are inserted for demo only. These should be removed after demo... */
         /* ----> */
         BEAT_GENLIST_PROGRAM_BUTTON( btn_left_focused, btn_left_normal, btn_left )
         BEAT_GENLIST_PROGRAM_BUTTON( btn_mid_focused, btn_mid_normal, btn_mid )
         BEAT_GENLIST_PROGRAM_BUTTON( btn_right_focused, btn_right_normal, btn_right )
         /* <---- */

           program { name: "continue_flipping";
            script {
               new Float:state;
               new Float:value;
               state = get_float(flipping_state);
               value = get_float(inc_value);

               if( state >= 0.5 )
               {
                  set_state(PART:"bg", "hide", state);
               }
               else if( state < 0.0 )
               {
                  set_state(PART:"bg", "default", state);
               }
               else
               {
                  set_state(PART:"bg", "flipping", state);
                  set_state(PART:"elm.text", "hide", state);
                  state += value;
                  if( state > 0.21 )
                     state = 0.5;
                  if( state < 0.0 )
                     state = -0.1;
                  set_float(flipping_state, state);
                  run_program( PROGRAM:"delay" );
               }
            }
           }
           program { name: "delay";
               action: STATE_SET "flipping" 0.10;
               target: "bg";
            in: FLIPPING_DELAY 0.0;
               after: "continue_flipping";
           }
           program { name: "start_flip_left";
            signal:  "elm,state,slide,left1";
            source:  "elm";
               script {
               set_float(flipping_state, 0.0);
               set_float(inc_value, 0.01);
               }
                after: "continue_flipping";
           }
           program { name: "start_flip_right";
            signal:  "elm,state,slide,right";
            source:  "elm";
               script {
               set_float(flipping_state, 0.21);
               set_float(inc_value, -0.01);
               }
                after: "continue_flipping";
           }
      }
   }
