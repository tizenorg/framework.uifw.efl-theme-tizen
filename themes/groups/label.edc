/*
 *  nBeat-theme
 *
 * Copyright (c) 2000 - 2010 Samsung Electronics Co., Ltd.
 *
 * Contact: Seokjae Jeong <seok.j.jeong@samsung.com>, Myoungwoon Roy Kim <Myoungwoon.kim@samsung.com>, Jeonghyun Yun <jh0506.yun@samsung.com>, Jaehwan Kim <jae.hwan.kim@samsung.com>, 
 * 		Chuneon Park <chuneon.park@samsung.com>, Juyung Seo <juyung.seo@samsung.com>, Woohyun Jung <wh0705.jung@samsung.com>, Myungjae Lee <mjae.lee@samsung.com>, Hyoyoung Chang <hyoyoung.chang@samsung.com>, 
 *		Hyunsil Park <hyunsil.park@samsung.com>, Sohyun Kim <anna1014.kim@samsung.com>, Seunggyun Kim <sgyun.kim@samsung.com>
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

#define TEXT_SLIDE_DURATION	10

      styles
	{
	   style { name: "textblock_style";
	      base: "font=SLP:style=Medium font_size=24 color="LABEL_TEXT_BLOCK_STYLE_COLOR_INC" wrap=word";
	      tag:  "br" "\n";
	      tag:  "ps" "ps";
	      tag:  "hilight" "+ font=SLP:style=Bold";
	      tag:  "b" "+ font=SLP:style=Bold";
	      tag:  "tab" "\t";
	   }
	}

      styles
	{
	   style { name: "textblock_charwrap_style";
	      base: "font=SLP:style=Medium font_size=24 color="LABEL_TEXT_BLOCK_STYLE_COLOR_INC" wrap=char";
	      tag:  "br" "\n";
	      tag:  "ps" "ps";
	      tag:  "hilight" "+ font=SLP:style=Bold";
	      tag:  "b" "+ font=SLP:style=Bold";
	      tag:  "tab" "\t";
	   }
	}

   group { name: "elm/label/base/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
	    }
     }
	 part { name: "label.text.clip";
		type: RECT;
	    description { state: "default" 0.0;
		   visible: 1;
		   color: 255 255 255 255;
		   rel1 { relative: 0 0; to: "label.swallow.background"; }
		   rel2 { relative: 1 1; to: "label.swallow.background"; }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    clip_to: "label.text.clip";
	    description { state: "default" 0.0;
			rel1.relative, 0.0 0.0;
			rel2.relative, 1.0 1.0;
			align, 0.0 0.0;
			text {
				style: "textblock_style";
				min: 1 0;
			}
	    }
	 }
      }
   }

   group { name: "elm/label/base_wrap/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
		   rel1 { relative: 0 0; to: "elm.text"; }
		   rel2 { relative: 1 1; to: "elm.text"; }
	    }
 	}
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    multiline: 1;
	    description { state: "default" 0.0;
	       text {
		  style: "textblock_style";
		  min: 0 1;
	       }
	    } 
	    description { state: "charwrap_mode" 0.0;
	       text {
		  style: "textblock_charwrap_style";
		  min: 0 1;
	       }
	    } 
	 }
      }
	programs {
		program { name: "default_on";
			signal: "elm,state,default";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text";
		}
		program { name: "charwrap_on";
			signal: "elm,state,charwrap";
			source: "elm";
			action: STATE_SET "charwrap_mode" 0.0;
			target: "elm.text";
		}
	} // end programs
   } // end group

   group { name: "elm/label/base_wrap_ellipsis/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
		   rel1 { relative: 0 0; to: "elm.text"; }
		   rel2 { relative: 1 1; to: "elm.text"; }
	    }
     }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    multiline: 1;
	    description { state: "default" 0.0;
		// FIXME : fixed for multiline ellipsis.
		//         does it need to make another ellipsis style? 
	       fixed: 0 1; 
	       text {
		  style: "textblock_style";
		  min: 0 1;
	       }
	    }
	    description { state: "charwrap_mode" 0.0;
		// FIXME : fixed for multiline ellipsis.
		//         does it need to make another ellipsis style? 
	       fixed: 0 1; 
	       text {
		  style: "textblock_charwrap_style";
		  min: 0 1;
	       }
	    }
	 }
      }
	programs {
		program { name: "default_on";
			signal: "elm,state,default";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text";
		}
		program { name: "charwrap_on";
			signal: "elm,state,charwrap";
			source: "elm";
			action: STATE_SET "charwrap_mode" 0.0;
			target: "elm.text";
		}
	} // end programs
   } // end group

   group { name: "elm/label/base/marker";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      styles
	{
	   style { name: "textblock_style2";
	      base: "font=SLP:style=Bold font_size=14 align=center color=#fff wrap=word";

	      tag:  "br" "\n";
	      tag:  "ps" "ps";
	      tag:  "hilight" "+ color=#ffff";
	      tag:  "b" "+ color=#ffff";
	      tag:  "tab" "\t";
	   }
	}
      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
		   rel1 { relative: 0 0; to: "elm.text"; }
		   rel2 { relative: 1 1; to: "elm.text"; }
	    }
     }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    description { state: "default" 0.0;
	       text {
		  style: "textblock_style2";
		  min: 1 1;
	       }
	    }
	 }
      }
   }

   group { name: "elm/label/base_wrap/marker";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
		   rel1 { relative: 0 0; to: "elm.text"; }
		   rel2 { relative: 1 1; to: "elm.text"; }
	    }
     }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    multiline: 1;
	    description { state: "default" 0.0;
	       text {
		  style: "textblock_style2";
		  min: 0 1;
	       }
	    }
	 }
      }
   }


   group { name: "elm/label/base/titlebar/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      parts {
         part { name: "elm.text";
            type: TEXT;
            effect: SHADOW;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               text {
                  font:     "SLP:style=Bold";
                  size:     28;
                  min:      0 0;
                  align:    0.0 0.5;
               }
               color2: 0 0 0 255;
            }
         }
      }
   }

   group { name: "elm/label/base/titlebar/header";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";
      styles {
         style { name: "header_textblock_style";
            base: "font=SLP:style=Medium font_size=34 color=#ffffff wrap=word";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "tab" "\t";
            tag:  "em" "+ font=SLP:style=Oblique";
            tag:  "b" "+ font=SLP:style=Bold";
            tag:  "link" "+ color=#800 underline=on underline_color=#8008";
            tag:  "hilight" "+ font=SLP:style=Bold";
         }
      }

      parts {
         part { name: "elm.text";
            type: TEXT;
            effect: SHADOW;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               text {
                  font:     "SLP:style=Medium";
                  size:     34;
                  min:      0 0;
                  align:    0.0 0.5;
	       }
	       color2: 0 0 0 255;
	    }
	 }
      }
   }


   group { name: "elm/label/base/slide_long";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";

	script {
		public g_duration, g_stopslide, g_timer_id, g_anim_id;
		
		public message(Msg_Type:type, id, ...) {
			if( (type==MSG_INT_SET) && (id==0) )
			{
				new duration;
				duration = getarg(2);
				set_int(g_duration, duration);
			}
		}
		public slide_to_end_anim(val, Float:pos)
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_tween_state(PART:"elm.text", pos, "slide_begin", 0.0, "slide_end", 0.0);
			if (pos >=1.0) {
				id = timer(0.5, "slide_to_begin", 1);
				set_int(g_timer_id, id);
			}
		}
		public slide_to_end()
		{
			new stopflag;
			new id;
			new duration;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			duration = get_int(g_duration);
			id = anim(duration, "slide_to_end_anim", 1);
			set_int(g_anim_id, id);

		}
		public slide_to_begin()
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_state(PART:"elm.text", "slide_begin", 0.0);
			id = timer(0.5, "slide_to_end", 1);
			set_int(g_timer_id, id);
		}
		public start_slide()
		{
			set_int(g_stopslide, 0);
			set_state(PART:"elm.text", "slide_begin", 0.0);
			slide_to_end();
		}
		public stop_slide()
		{
			new id;
			set_int(g_stopslide, 1);
			id = get_int(g_anim_id);
			cancel_anim(id);
			id = get_int(g_timer_id);
			cancel_timer(id);
			set_state(PART:"elm.text", "default", 0.0);
		}
	}

      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
	    }
     }
	 part { name: "label.text.clip";
		type: RECT;
	    description { state: "default" 0.0;
		   visible: 1;
		   color: 255 255 255 255;
		   rel1 { relative: 0 0; to: "label.swallow.background"; }
		   rel2 { relative: 1 1; to: "label.swallow.background"; }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    clip_to: "label.text.clip";
	    description { state: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 0.0 0.0;
			text {
				style: "textblock_style";
				min: 1 0;
			}
	    }
		description { state: "slide_end" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 0.0 1.0;
			align: 1.0 0.0;
		}
		description { state: "slide_begin" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 1.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 0.0 0.0;
		}

	 }
      }
	  programs
	  {
		program { name, "start_slide";
			source: "elm";
			signal: "elm,state,slide,start";
			script
			{
				start_slide();
			}
		}
		program { name, "stop_slide";
			source: "elm";
			signal: "elm,state,slide,stop";
			script
			{
				stop_slide();
			}
		}
	  }
   }


   group { name: "elm/label/base/slide_short";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";

	script {
		public g_duration, g_stopslide, g_timer_id, g_anim_id;
		
		public message(Msg_Type:type, id, ...) {
			if( (type==MSG_INT_SET) && (id==0) )
			{
				new duration;
				duration = getarg(2);
				set_int(g_duration, duration);
			}
		}
		public slide_to_end_anim(val, Float:pos)
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_tween_state(PART:"elm.text", pos, "slide_begin", 0.0, "slide_end", 0.0);
			if (pos >=1.0) {
				id = timer(0.5, "slide_to_begin", 1);
				set_int(g_timer_id, id);
			}
		}
		public slide_to_end()
		{
			new stopflag;
			new id;
			new duration;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			duration = get_int(g_duration);
			id = anim(duration, "slide_to_end_anim", 1);
			set_int(g_anim_id, id);

		}
		public slide_to_begin()
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_state(PART:"elm.text", "slide_begin", 0.0);
			id = timer(0.5, "slide_to_end", 1);
			set_int(g_timer_id, id);
		}
		public start_slide()
		{
			set_int(g_stopslide, 0);
			set_state(PART:"elm.text", "slide_begin", 0.0);
			slide_to_end();
		}
		public stop_slide()
		{
			new id;
			set_int(g_stopslide, 1);
			id = get_int(g_anim_id);
			cancel_anim(id);
			id = get_int(g_timer_id);
			cancel_timer(id);
			set_state(PART:"elm.text", "default", 0.0);
		}
	}

      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
	    }
     }
	 part { name: "label.text.clip";
		type: RECT;
	    description { state: "default" 0.0;
		   visible: 1;
		   color: 255 255 255 255;
		   rel1 { relative: 0 0; to: "label.swallow.background"; }
		   rel2 { relative: 1 1; to: "label.swallow.background"; }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    clip_to: "label.text.clip";
	    description { state: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 0.0 0.0;
			text {
				style: "textblock_style";
				min: 1 0;
			}
	    }
		description { state: "slide_end" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 1.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 1.0 0.0;
		}
		description { state: "slide_begin" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 0.0 1.0;
			align: 0.0 0.0;
		}

	 }
      }
	  programs
	  {
		program { name, "start_slide";
			source: "elm";
			signal: "elm,state,slide,start";
			script
			{
				start_slide();
			}
		}
		program { name, "stop_slide";
			source: "elm";
			signal: "elm,state,slide,stop";
			script
			{
				stop_slide();
			}
		}
	  }
   }

   group { name: "elm/label/base/slide_bounce";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "18";
      data.item: "max_font_size" "60";

	script {
		public g_duration, g_stopslide, g_timer_id, g_anim_id;
		
		public message(Msg_Type:type, id, ...) {
			if( (type==MSG_INT_SET) && (id==0) )
			{
				new duration;
				duration = getarg(2);
				set_int(g_duration, duration);
			}
		}
		public slide_to_end_anim(val, Float:pos)
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_tween_state(PART:"elm.text", pos, "slide_begin", 0.0, "slide_end", 0.0);
			if (pos >=1.0) {
				id = timer(0.5, "slide_to_begin", 1);
				set_int(g_timer_id, id);
			}
		}
		public slide_to_end()
		{
			new stopflag;
			new id;
			new duration;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			duration = get_int(g_duration);
			id = anim(duration, "slide_to_end_anim", 1);
			set_int(g_anim_id, id);

		}
		public slide_to_begin_anim(val, Float:pos)
		{
			new stopflag;
			new id;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			set_tween_state(PART:"elm.text", pos, "slide_end", 0.0, "slide_begin", 0.0);
			if (pos >=1.0) {
				id = timer(0.5, "slide_to_end", 1);
				set_int(g_timer_id, id);
			}
		}
		public slide_to_begin()
		{
			new stopflag;
			new id;
			new duration;
			stopflag = get_int(g_stopslide);
			if (stopflag == 1) return;
			duration = get_int(g_duration);
			id = anim(duration, "slide_to_begin_anim", 1);
			set_int(g_anim_id, id);
		}
		public start_slide()
		{
			set_int(g_stopslide, 0);
			set_state(PART:"elm.text", "slide_begin", 0.0);
			slide_to_end();
		}
		public stop_slide()
		{
			new id;
			set_int(g_stopslide, 1);
			id = get_int(g_anim_id);
			cancel_anim(id);
			id = get_int(g_timer_id);
			cancel_timer(id);
			set_state(PART:"elm.text", "default", 0.0);
		}
	}

      parts {
	 part { name: "label.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
		   visible: 1;
	    }
     }
	 part { name: "label.text.clip";
		type: RECT;
	    description { state: "default" 0.0;
		   visible: 1;
		   color: 255 255 255 255;
		   rel1 { relative: 0 0; to: "label.swallow.background"; }
		   rel2 { relative: 1 1; to: "label.swallow.background"; }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    clip_to: "label.text.clip";
	    description { state: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 0.0 0.0;
			text {
				style: "textblock_style";
				min: 1 0;
			}
	    }
		description { state: "slide_end" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 1.0 0.0;
			rel2.relative: 1.0 1.0;
			align: 1.0 0.0;
		}
		description { state: "slide_begin" 0.0;
			inherit: "default" 0.0;
			rel1.relative: 0.0 0.0;
			rel2.relative: 0.0 1.0;
			align: 0.0 0.0;
		}

	 }
      }
	  programs
	  {
		program { name, "start_slide";
			source: "elm";
			signal: "elm,state,slide,start";
			script
			{
				start_slide();
			}
		}
		program { name, "stop_slide";
			source: "elm";
			signal: "elm,state,slide,stop";
			script
			{
				stop_slide();
			}
		}
	  }
   }



