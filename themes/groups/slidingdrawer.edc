/*
 *  nbeat-theme
 *
 * Copyright (c) 2000 - 2011 Samsung Electronics Co., Ltd. All rights reserved.
 *
 * Contact: Seokjae Jeong <seok.j.jeong@samsung.com>, Myoungwoon Roy Kim <Myoungwoon.kim@samsung.com>, Jeonghyun Yun <jh0506.yun@samsung.com>, Jaehwan Kim <jae.hwan.kim@samsung.com>, Chuneon Park <chuneon.park@samsung.com>, Juyung Seo <juyung.seo@samsung.com>, Woohyun Jung <wh0705.jung@samsung.com>, Myungjae Lee <mjae.lee@samsung.com>, Hyoyoung Chang <hyoyoung.chang@samsung.com>, IlKook Yun <ilkook.yun@samsung.com>, CinWoo Kim <cinoo.kim@samsung.com> JiYeon Park <jy0703.park@samsung.com>
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

#define SLIDINGDRAWER_BG_COLOR 246 245 237 255 
#define SLIDINGDRAWER_HANDLER_WIDTH 53
#define SLIDINGDRAWER_HANDLER_HEIGHT 20
#define SLIDINGDRAWER_TOPDOWN_HANDLER_HEIGHT 40
#define SLIDINGDRAWER_LEFTRIGHT_HANDLER_WIDTH 40

group {
	name: "elm/slidingdrawer/bottom/default";
	images {
		image: "slidingdrawer_bottom_handler.png" COMP;
		image: "slidingdrawer_bottom_handler_bar.png" COMP;
	}
	script {
		public g_mouse_state = 0;
		public animator_up(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vy += step;
			if (vy > 1.0)
				vy = 1.0;
			set_drag(PART:"elm.dragable.handler", 1.0, vy);
		}
		public animator_down(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vy -= step;
			if (vy < 0.0)
				vy = 0.0;
			set_drag(PART:"elm.dragable.handler", 1.0, vy);
		}
	}	
	parts {		
		part {
			name: "elm.swallow.dragable_rect";
			type: SWALLOW;
			mouse_events: 0;
			description {
				visible: 0;
				align: 0 1;
			}
		}
		part {
			name: "content_bg";
			type: RECT;
			mouse_events: 0;
			description {
				rel1 {to:"elm.swallow.content";}
				rel2 {to:"elm.swallow.content";}
				color: SLIDINGDRAWER_BG_COLOR;
			}
		}
		part {
			name: "elm.swallow.content";
			type: SWALLOW;
			mouse_events: 1;
			description {
				rel1 {to: "elm.dragable.handler"; relative: 0 1;}				
			}
		}
		part {
			name: "handler_bar";
			type: IMAGE;
			scale: 1;
			description {
				fixed: 0 1;
				rel1 {to: "elm.dragable.handler";}
				rel2 {to: "elm.dragable.handler";}
				image {
					normal: "slidingdrawer_bottom_handler_bar.png";
				} 			
			}
		}
		part {
			name: "elm.dragable.handler";
			type: SWALLOW;
			mouse_events: 1;
			scale: 1;
			dragable {
				confine: "elm.swallow.dragable_rect";
				x: 0 0 0;
				y: -1 1 1;
			} 
			description {
				min: 1 SLIDINGDRAWER_TOPDOWN_HANDLER_HEIGHT;
				fixed: 0 1;
				align: 0 0;
				rel1 {relative: 0 0; to: "elm.swallow.dragable_rect";}
				rel2 {relative: 1 0; to: "elm.swallow.dragable_rect";}
			}
		}		
		part {
			name: "elm.image.handler";
			type: IMAGE;
			mouse_events: 0;
			scale: 1;
			description {
				min: SLIDINGDRAWER_HANDLER_WIDTH SLIDINGDRAWER_HANDLER_HEIGHT;
				max: SLIDINGDRAWER_HANDLER_WIDTH SLIDINGDRAWER_HANDLER_HEIGHT;
				fixed: 1 1;
				align: 0.5 0.5;
				image {
					normal: "slidingdrawer_bottom_handler.png";
				}
				rel1 {to:"elm.dragable.handler";}
				rel2 {to:"elm.dragable.handler";} 
			}			
		}
	}
	programs {
		program { 
			name: "drag_handler"; 
			signal: "drag"; 
			source: "elm.dragable.handler";
			script { 
				set_int (g_mouse_state, 1);
			}
		}
		program { 
			name: "down_handler"; 
			signal: "mouse,down,*"; 
			source: "elm.dragable.handler"; 
			script { 
				set_int (g_mouse_state, 0);
			} 
		}
		program { 
			name: "handler_clicked"; 
			signal: "mouse,clicked,1"; 
			source: "elm.dragable.handler"; 
			script { 
				new Float:x;
				new Float:y;
				if (get_int(g_mouse_state) == 0) {
					emit("animation_start", "elm.dragable.handler");
					get_drag(PART:"elm.dragable.handler", x, y);
					if (y == 0) {
						anim(1, "animator_up", 1);
					}
					else if( y == 1 ){
						anim(1, "animator_down", 1);
					}
				}
			} 
		} 
	} 
}












































group {
	name: "elm/slidingdrawer/left/default";
	images {
		image: "slidingdrawer_left_handler.png" COMP;
		image: "slidingdrawer_left_handler_bar.png" COMP;
	}
	script {
		public g_mouse_state = 0;
		public animator_right(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vx += step;
			if (vx > 1.0)
				vx = 1.0;
			set_drag(PART:"elm.dragable.handler", vx, 1.0);
		}
		public animator_left(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vx -= step;
			if (vx < 0.0)
				vx = 0.0;
			set_drag(PART:"elm.dragable.handler", vx, 1.0);
		}
	}
	parts {		
		part {
			name: "elm.swallow.dragable_rect";
			type: SWALLOW;
			mouse_events: 0;
			description {
				visible: 0;
				align: 0 0;
			}
		}
		part {
			name: "content_bg";
			type: RECT;
			mouse_events: 0;
			description {
				rel1 {to:"elm.swallow.content";}
				rel2 {to:"elm.swallow.content";}
				color: SLIDINGDRAWER_BG_COLOR;
			}
		}			
		part {
			name: "elm.swallow.content";
			type: SWALLOW;
			mouse_events: 1;
			description {
				rel2 {to: "elm.dragable.handler"; relative: 0 1;}
			}
		}
		part {
			name: "handler_bar";
			type: IMAGE;
			scale: 1;
			description {
				fixed: 0 1;
				rel1 {to: "elm.dragable.handler";}
				rel2 {to: "elm.dragable.handler";}
				image {
					normal: "slidingdrawer_left_handler_bar.png";
				} 			
			}
		}		
		part {
			name: "elm.dragable.handler";
			type: SWALLOW;
			mouse_events: 1;
			scale: 1;
			dragable {
				confine: "elm.swallow.dragable_rect";
				x: 1 1 1;
				y: 0 0 0;
			}  
			description {
				min: SLIDINGDRAWER_LEFTRIGHT_HANDLER_WIDTH 1;
				fixed: 1 0;
				align: 0 0.5;
				rel1 {relative: 1 0; to: "elm.swallow.dragable_rect";}
				rel2 {relative: 1 1; to: "elm.swallow.dragable_rect";}				
			}
		}				
		part {
			name: "elm.image.handler";
			type: IMAGE;
			mouse_events: 0;
			scale: 1;
			description {
				min: SLIDINGDRAWER_HANDLER_HEIGHT SLIDINGDRAWER_HANDLER_WIDTH;
				max: SLIDINGDRAWER_HANDLER_HEIGHT SLIDINGDRAWER_HANDLER_WIDTH;
				fixed: 1 1;
				align: 0.5 0.5;
				image {
					normal: "slidingdrawer_left_handler.png";
				}
				rel1 {to:"elm.dragable.handler";}
				rel2 {to:"elm.dragable.handler";} 
			}			
		}		
	}
	programs {
		program { 
			name: "drag_handler"; 
			signal: "drag"; 
			source: "elm.dragable.handler";
			script { 
				set_int (g_mouse_state, 1);
			} 
		}
		program { 
			name: "down_handler"; 
			signal: "mouse,down,*"; 
			source: "elm.dragable.handler"; 
			script { 
				set_int (g_mouse_state, 0);
			} 
		}	
		program { 
			name: "handler_clicked"; 
			signal: "mouse,clicked,1"; 
			source: "elm.dragable.handler"; 
			script { 
				new Float:x;
				new Float:y;
				if (get_int(g_mouse_state) == 0) {
					emit("animation_start", "elm.dragable.handler");
					get_drag(PART:"elm.dragable.handler", x, y);
					if (x == 0) {
						anim(1, "animator_right", 1);
					}
					else if( x == 1 ){
						anim(1, "animator_left", 1);
					}
				}
			} 
		} 
	} 
}
group {	
	name: "elm/slidingdrawer/top/default";
	images {
		image: "slidingdrawer_top_handler.png" COMP;
		image: "slidingdrawer_top_handler_bar.png" COMP;
	}
	script {
		public g_mouse_state = 0;
		public animator_up(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vy += step;
			if (vy > 1.0)
				vy = 1.0;
			set_drag(PART:"elm.dragable.handler", 1.0, vy);
		}
		public animator_down(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vy -= step;
			if (vy < 0.0)
				vy = 0.0;
			set_drag(PART:"elm.dragable.handler", 1.0, vy);
		} 
	} 		
	parts {		
		part {
			name: "elm.swallow.dragable_rect";
			type: SWALLOW;
			mouse_events: 0;
			description {
				visible: 0;
				align: 0 0;
			}
		}
		part {
			name: "content_bg";
			type: RECT;
			mouse_events: 0;
			description {
				rel1 {to:"elm.swallow.content";}
				rel2 {to:"elm.swallow.content";}
				color: SLIDINGDRAWER_BG_COLOR;
			}
		}		
		part {
			name: "elm.swallow.content";
			type: SWALLOW;
			mouse_events: 1;
			description {
				rel2 {to: "elm.dragable.handler"; relative: 1 0;}
			}
		}
		part {
			name: "handler_bar";
			type: IMAGE;
			scale: 1;
			description {
				fixed: 0 1;
				rel1 {to: "elm.dragable.handler";}
				rel2 {to: "elm.dragable.handler";}
				image {
					normal: "slidingdrawer_top_handler_bar.png";
				} 			
			}
		}		
		part {
			name: "elm.dragable.handler";
			type: SWALLOW;
			mouse_events: 1;
			scale: 1;
			dragable {
				confine: "elm.swallow.dragable_rect";
				x: 0 0 0;
				y: 1 1 1;
			}  
			description {
				min: 1 SLIDINGDRAWER_TOPDOWN_HANDLER_HEIGHT;
				fixed: 0 0;
				align: 0 1;
				rel1 {relative: 0 1; to: "elm.swallow.dragable_rect";}
				rel2 {relative: 1 1; to: "elm.swallow.dragable_rect";}				
			}
		}
		part {
			name: "elm.image.handler";
			type: IMAGE;
			mouse_events: 0;
			scale: 1;
			description {
				min: SLIDINGDRAWER_HANDLER_WIDTH SLIDINGDRAWER_HANDLER_HEIGHT;
				max: SLIDINGDRAWER_HANDLER_WIDTH SLIDINGDRAWER_HANDLER_HEIGHT;
				fixed: 1 1;
				align: 0.5 0.5;
				image {
					normal: "slidingdrawer_top_handler.png";
				}
				rel1 {to:"elm.dragable.handler";}
				rel2 {to:"elm.dragable.handler";} 
			}			
		}
	}
	programs {
		program { 
			name: "drag_handler"; 
			signal: "drag"; 
			source: "elm.dragable.handler";
			script { 
				set_int (g_mouse_state, 1);
			} 
		}
		program { 
			name: "down_handler"; 
			signal: "mouse,down,*"; 
			source: "elm.dragable.handler"; 
			script { 
				set_int (g_mouse_state, 0);
			} 
		}
		program { 
			name: "handler_clicked"; 
			signal: "mouse,clicked,1"; 
			source: "elm.dragable.handler"; 
			script { 
				new Float:x;
				new Float:y;
				if (get_int(g_mouse_state) == 0) {
					emit("animation_start", "elm.dragable.handler");
					get_drag(PART:"elm.dragable.handler", x, y);
					if (y == 1) {
						anim(1, "animator_down", 1);
					}
					else if( y == 0 ){
						anim(1, "animator_up", 1);
					}
				}
			} 
		} 
	} 
	
}

group {
	name: "elm/slidingdrawer/right/default";
	images {
		image: "slidingdrawer_right_handler.png" COMP;
		image: "slidingdrawer_right_handler_bar.png" COMP;
	}
	script {
		public g_mouse_state = 0;
		public animator_right(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vx += step;
			if (vx > 1.0)
				vx = 1.0;
			set_drag(PART:"elm.dragable.handler", vx, 1.0);
		}
		public animator_left(val, Float:step) {
			new Float:vx;
			new Float:vy;
			get_drag(PART:"elm.dragable.handler", vx, vy);
			vx -= step;
			if (vx < 0.0)
				vx = 0.0;
			set_drag(PART:"elm.dragable.handler", vx, 1.0);
		}
	}	
	parts {		
		part {
			name: "elm.swallow.dragable_rect";
			type: SWALLOW;
			mouse_events: 0;
			description {
				visible: 0;
				align: 1 0;
			}
		}
		part {
			name: "content_bg";
			type: RECT;
			mouse_events: 0;
			description {
				rel1 {to:"elm.swallow.content";}
				rel2 {to:"elm.swallow.content";}
				color: SLIDINGDRAWER_BG_COLOR;
			}
		}		
		part {
			name: "elm.swallow.content";
			type: SWALLOW;
			mouse_events: 1;
			description {
				rel1 {to: "elm.dragable.handler"; relative: 1 0;}
			}
		}
		part {
			name: "handler_bar";
			type: IMAGE;
			scale: 1;
			description {
				fixed: 0 1;
				rel1 {to: "elm.dragable.handler";}
				rel2 {to: "elm.dragable.handler";}
				image {
					normal: "slidingdrawer_right_handler_bar.png";
				} 			
			}
		}		
		part {
			name: "elm.dragable.handler";
			type: SWALLOW;
			mouse_events: 1;
			scale: 1;
			dragable {
				confine: "elm.swallow.dragable_rect";
				x: -1 1 1;
				y: 0 0 0;
			}  
			description {
				min: SLIDINGDRAWER_LEFTRIGHT_HANDLER_WIDTH 1;
				fixed: 1 0;
				align: 1 0.5;
				rel1 {relative: 0 0; to: "elm.swallow.dragable_rect";}
				rel2 {relative: 0 1; to: "elm.swallow.dragable_rect";}				
			}
		}		
		part {
			name: "elm.image.handler";
			type: IMAGE;
			mouse_events: 0;
			scale: 1;
			description {
				min: SLIDINGDRAWER_HANDLER_HEIGHT SLIDINGDRAWER_HANDLER_WIDTH;
				max: SLIDINGDRAWER_HANDLER_HEIGHT SLIDINGDRAWER_HANDLER_WIDTH;
				fixed: 1 1;
				align: 0.5 0.5;
				image {
					normal: "slidingdrawer_right_handler.png";
				}
				rel1 {to:"elm.dragable.handler";}
				rel2 {to:"elm.dragable.handler";} 
			}			
		}		
	}
	programs {
		program { 
			name: "drag_handler"; 
			signal: "drag"; 
			source: "elm.dragable.handler";
			script { 
				set_int (g_mouse_state, 1);
			} 
		}
		program { 
			name: "down_handler"; 
			signal: "mouse,down,*"; 
			source: "elm.dragable.handler"; 
			script { 
				set_int (g_mouse_state, 0);
			} 
		}	
		program { 
			name: "handler_clicked"; 
			signal: "mouse,clicked,1"; 
			source: "elm.dragable.handler"; 
			script { 
				new Float:x;
				new Float:y;
				if (get_int(g_mouse_state) == 0) {
					emit("animation_start", "elm.dragable.handler");
					get_drag(PART:"elm.dragable.handler", x, y);
					if (x == 0) {
						anim(1, "animator_right", 1);
					}
					else if( x == 1 ){
						anim(1, "animator_left", 1);
					}
				}
			} 
		} 
	}	
}

