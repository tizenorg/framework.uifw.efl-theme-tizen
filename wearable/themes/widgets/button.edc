/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


   group { name: "elm/button/base/transparent";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               min: 0 BUTTON_HEIGHT;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               text {
                  min: 0 1;
                  style: "button_general_text_normal";
               }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_general_text_dim";
            }
         }
         part { name: "elm.swallow.content";
            clip_to: "elm.swallow.content.clip";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0; }
         }
         part { name: "elm.swallow.content.clip";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0; }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_SWALLOW_DIM_COLOR;
            }
         }
      }
      programs {
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "bg";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press1");
                 }
            }
         }
         program { name: "button_press1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  //set_state(PART:"bg", "pressed", 0.0);
                  emit("elm,action,press", "");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "bg";
            script {
               if (get_int(mouse_down) == 1) {
                 set_int(mouse_down, 0);
                 run_program(PROGRAM:"button_unpress1");
               }
            }
         }
         program { name: "button_unpress1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  //set_state(PART:"bg", "default", 0.0);
                  emit("elm,action,unpress", "");
               }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "bg";
            script {
               new st[31];
               new Float:vl;
               if (get_int(multi_down) == 0) {
                  get_state(PART:"bg", st, 30, vl);
                  if (strcmp(st, "disabled")) {
                     play_sample("touch_sound", 1.0);
                     emit("elm,action,click", "");
                  }
               }
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

   group { name: "elm/button/base/default";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 BUTTON_HEIGHT;
               color: BUTTON_DEFAULT_NORMAL_BG_COLOR;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_DEFAULT_PRESS_BG_COLOR;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_DEFAULT_DISABLE_BG_COLOR;
            }
         }
         part { name: "padding_left_top";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               rel2.relative: 0.0 0.0;
               min: BUTTON_PADDING_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "padding_right_bottom";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 1.0;
               rel1.relative: 1.0 1.0;
               min: BUTTON_PADDING_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "icon_rect";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.5;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 0.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               min: 0 0;
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            clip_to: "elm.swallow.content.clip";
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               align: 0.0 0.5;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 0.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               fixed: 1 0;
            }
            description { state: "visible" 0.0;
               fixed: 1 1;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
               align: 1.0 0.5;
               rel1 {
                  relative: 0.0 1.0;
                  to_x: "elm.text";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to_x: "elm.text";
                  to_y: "padding_right_bottom";
               }
            }
            description { state: "icononly" 0.0;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  relative: 1.0 1.0;
                  to_x: "icon_rect";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to: "padding_right_bottom";
               }
               text {
                  max: 1 0;
                  style: "button_general_text_normal";
               }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_general_text_dim";
            }
         }
         part { name: "elm.swallow.content.clip";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0; }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_SWALLOW_DIM_COLOR;
            }
         }
      }
      programs {
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "bg";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press1");
                 }
            }
         }
         program { name: "button_press1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  set_state(PART:"bg", "pressed", 0.0);
                  emit("elm,action,press", "");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "bg";
            script {
               if (get_int(mouse_down) == 1) {
                 set_int(mouse_down, 0);
                 run_program(PROGRAM:"button_unpress1");
               }
            }
         }
         program { name: "button_unpress1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  set_state(PART:"bg", "default", 0.0);
                  emit("elm,action,unpress", "");
               }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "bg";
            script {
               new st[31];
               new Float:vl;
               if (get_int(multi_down) == 0) {
                  get_state(PART:"bg", st, 30, vl);
                  if (strcmp(st, "disabled")) {
                     play_sample("touch_sound", 1.0);
                     emit("elm,action,click", "");
                  }
               }
            }
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "icononly"))
                 {
                    set_state(PART:"elm.swallow.content", "visible", 0.0);
                    set_state(PART:"icon_rect", "visible", 0.0);
                 }
               set_state(PART:"elm.text", "visible", 0.0);
            }
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 {
                    set_state(PART:"elm.swallow.content", "icononly", 0.0);
                    set_state(PART:"icon_rect", "default", 0.0);
                 }
               set_state(PART:"elm.text", "default", 0.0);
            }
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.content";
            target: "icon_rect";
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
            target: "icon_rect";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "bg";
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "enabled" 0.0;
            target: "bg";
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

group { name: "elm/button/base/green";
   inherit: "elm/button/base/default";
   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: BUTTON_GREEN_NORMAL_BG_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_GREEN_PRESS_BG_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_GREEN_DISABLE_BG_COLOR;
         }
      }
   }
}

group { name: "elm/button/base/orange";
   inherit: "elm/button/base/default";
   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: BUTTON_ORANGE_NORMAL_BG_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_ORANGE_PRESS_BG_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_ORANGE_DISABLE_BG_COLOR;
         }
      }
   }
}

group { name: "elm/button/base/red";
   inherit: "elm/button/base/default";
   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: BUTTON_RED_NORMAL_BG_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_RED_PRESS_BG_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_RED_DISABLE_BG_COLOR;
         }
      }
   }
}

   group { name: "elm/button/base/popup";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "base";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 0 1;
               min: 0 (POPUP_BUTTON_HEIGHT+POPUP_IMAGE_OFFSET_SIZE);
               max: -1 (POPUP_BUTTON_HEIGHT+POPUP_IMAGE_OFFSET_SIZE);
               color: 0 0 0 0;
            }
         }
         part { name: "bg";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 0 1;
               align: 0.0 0.0;
               rel1.to: "base";
               rel2.to: "base";
               min: 0 POPUP_BUTTON_HEIGHT;
               max: -1 POPUP_BUTTON_HEIGHT;
               color: BUTTON_POPUP_NORMAL_BG_COLOR;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_POPUP_PRESS_BG_COLOR;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_POPUP_DISABLE_BG_COLOR;
            }
         }
         part { name: "padding_left_top";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               rel1.to: "bg";
               rel2 {
                  relative: 0.0 0.0;
                  to: "bg";
               }
               min: BUTTON_PADDING_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "padding_right_bottom";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 1.0;
               rel1 {
                  relative: 1.0 1.0;
                  to: "bg";
               }
               rel2.to: "bg";
               min: BUTTON_PADDING_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "icon_rect";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.5;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 0.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               min: 0 0;
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
               fixed: 1 1;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            clip_to: "elm.swallow.content.clip";
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               align: 0.0 0.5;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 0.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               fixed: 1 0;
            }
            description { state: "visible" 0.0;
               fixed: 1 1;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
               align: 1.0 0.5;
               rel1 {
                  relative: 0.0 1.0;
                  to_x: "elm.text";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to_x: "elm.text";
                  to_y: "padding_right_bottom";
               }
            }
            description { state: "icononly" 0.0;
               min: BUTTON_ICON_SIZE;
               max: BUTTON_ICON_SIZE;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  relative: 1.0 1.0;
                  to_x: "icon_rect";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to: "padding_right_bottom";
               }
               text {
                  max: 1 0;
                  style: "button_general_text_normal";
               }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_general_text_dim";
            }
         }
         part { name: "elm.swallow.content.clip";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0; }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: BUTTON_SWALLOW_DIM_COLOR;
            }
         }
      }
      programs {
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "base";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press1");
                 }
            }
         }
         program { name: "button_press1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  set_state(PART:"bg", "pressed", 0.0);
                  emit("elm,action,press", "");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "base";
            script {
               if (get_int(mouse_down) == 1) {
                 set_int(mouse_down, 0);
                 run_program(PROGRAM:"button_unpress1");
               }
            }
         }
         program { name: "button_unpress1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  set_state(PART:"bg", "default", 0.0);
                  emit("elm,action,unpress", "");
               }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "base";
            script {
               new st[31];
               new Float:vl;
               if (get_int(multi_down) == 0) {
                  get_state(PART:"bg", st, 30, vl);
                  if (strcmp(st, "disabled")) {
                     play_sample("touch_sound", 1.0);
                     emit("elm,action,click", "");
                  }
               }
            }
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "icononly"))
                 {
                    set_state(PART:"elm.swallow.content", "visible", 0.0);
                    set_state(PART:"icon_rect", "visible", 0.0);
                 }
               set_state(PART:"elm.text", "visible", 0.0);
            }
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 {
                    set_state(PART:"elm.swallow.content", "icononly", 0.0);
                    set_state(PART:"icon_rect", "default", 0.0);
                 }
               set_state(PART:"elm.text", "default", 0.0);
            }
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.content";
            target: "icon_rect";
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
            target: "icon_rect";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "bg";
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "enabled" 0.0;
            target: "bg";
            target: "elm.swallow.content.clip";
            target: "elm.text";
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_icon";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      images {
         image: "tw_action_item_background_disabled_holo_dark.png" COMP;
         image: "tw_action_item_background_pressed_holo_dark.png" COMP;
      }
      parts {
         part { name: "button_bg";
            type: IMAGE;
            scale: 1;
            description { state: "default" 0.0;
               min: ACTIONBAR_NEXT_BTN_SIZE;
               max: ACTIONBAR_NEXT_BTN_SIZE;
               visible: 0;
               image {
                  normal: "tw_action_item_background_pressed_holo_dark.png";
                  border: BUTTON_NAVIFRAME_BG_BORDER_SIZE;
                  border_scale: 1;
               }
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               image{
                  normal: "tw_action_item_background_disabled_holo_dark.png";
                  border: BUTTON_NAVIFRAME_BG_BORDER_SIZE;
                  border_scale: 1;
               }
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            clip_to: "elm.icon.clipper";
            description { state: "default" 0.0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.icon.clipper";
            type: RECT;
            description { state: "default" 0.0; }
            description { state: "clicked" 0.0; }
            description { state: "disabled" 0.0;
               color: ACTIONBAR_MORE_DISABLED_COLOR;
            }
         }
         part { name: "over2";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "over3";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_click";
            signal: "mouse,down,1";
            source: "over2";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_click1");
                 }
            }
         }
         program { name: "button_click1";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "button_click_anim";
         }
         program { name: "button_click_anim";
            script {
               set_state(PART:"elm.icon.clipper", "clicked", 0.0);
               set_state(PART:"button_bg", "pressed", 0.0);
            }
         }
         program { name: "button_double_click";
            signal: "mouse,down,1,double";
            source: "over2";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_click_anim");
                 }
            }
         }
         program { name: "button_unpress";
            action: SIGNAL_EMIT "elm,action,unpress" "";
            after: "button_unclick_anim";
         }
         program { name: "button_unclick_anim";
            action: STATE_SET "default" 0.0;
            target: "button_bg";
         }
         program { name: "button_mouseout_clicked";
            signal: "mouse,up,1";
            source: "over3";
            script {
               if (get_int(mouse_down) == 1)
                 {
                    set_int(mouse_down, 0);
                    set_state(PART:"elm.icon.clipper", "default", 0.0);
                    run_program(PROGRAM:"button_unpress");
                 }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_unclick3");
               }
            }
         }
         program { name: "play_sound";
            action: PLAY_SAMPLE "touch_sound" 1.0;
         }
         program { name: "button_unclick3";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disabler";
            target: "elm.icon.clipper";
            target: "button_bg";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disabler";
            target: "elm.icon.clipper";
            target: "button_bg";
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_schedules_icon";
      inherit: "elm/button/base/naviframe/title_icon";
      parts {
         part { name: "button_bg";
            type: IMAGE;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_SCHEDULE_SIZE;
               max: BUTTON_NAVIFRAME_SCHEDULE_SIZE;
               visible: 0;
               image {
                  normal: "tw_action_item_background_pressed_holo_dark.png";
                  border: BUTTON_NAVIFRAME_BG_BORDER_SIZE;
                  border_scale: 1;
               }
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               image{
                  normal: "tw_action_item_background_disabled_holo_dark.png";
                  border: BUTTON_NAVIFRAME_BG_BORDER_SIZE;
                  border_scale: 1;
               }
            }
         }
      }
   }

group { name: "elm/button/base/nextdepth";
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   images {
      image: "tw_btn_next_depth_holo_dark.png" COMP;
   }
   parts {
      part { name: "bg";
         type: IMAGE;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_NEXTDEPTH_SIZE;
            max: BUTTON_NEXTDEPTH_SIZE;
            fixed: 1 1;
            image.normal: "tw_btn_next_depth_holo_dark.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_NEXTDEPTH_PRESS_BG_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_NEXTDEPTH_DISABLE_BG_COLOR;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "bg";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              {
                  set_int(mouse_down, 1);
                  run_program(PROGRAM:"button_press1");
              }
         }
      }
      program { name: "button_press1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"bg", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "bg";
         script {
            new st[31];
            new Float:vl;
            if (get_int(mouse_down) == 1)
              {
                 set_int(mouse_down, 0);
                 get_state(PART:"bg", st, 30, vl);
                 if (strcmp(st, "disabled")) {
                    set_state(PART:"bg", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
              }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "bg";
         script {
            new st[31];
            new Float:vl;
            if (get_int(multi_down) == 0) {
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  play_sample("touch_sound", 1.0);
                  emit("elm,action,click", "");
               }
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "bg";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/button/base/plus";
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   images {
      image: "tw_controller_btn_plus_normal.png" COMP;
      image: "tw_controller_btn_plus_pressed.png" COMP;
      image: "tw_controller_btn_plus_dim.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_PLUS_SIZE;
            max: BUTTON_PLUS_SIZE;
            fixed: 1 1;
            align: 1.0 0.5;
            image.normal: "tw_controller_btn_plus_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_plus_pressed.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_plus_dim.png";
         }
      }
      part { name: "event";
         type: RECT;
         scale: 1;
         repeat_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              {
                  set_int(mouse_down, 1);
                  run_program(PROGRAM:"button_press1");
              }
         }
      }
      program { name: "button_press1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(mouse_down) == 1)
              {
                 set_int(mouse_down, 0);
                 get_state(PART:"event", st, 30, vl);
                 if (strcmp(st, "disabled")) {
                    set_state(PART:"bg", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
              }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(multi_down) == 0) {
               get_state(PART:"event", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  play_sample("touch_sound", 1.0);
                  emit("elm,action,click", "");
               }
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
         target: "bg";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
         target: "bg";
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/button/base/minus";
   inherit: "elm/button/base/plus";
   images {
      image: "tw_controller_btn_minus_normal.png" COMP;
      image: "tw_controller_btn_minus_pressed.png" COMP;
      image: "tw_controller_btn_minus_dim.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_PLUS_SIZE;
            max: BUTTON_PLUS_SIZE;
            fixed: 1 1;
            align: 0.0 0.5;
            image.normal: "tw_controller_btn_minus_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_minus_pressed.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_minus_dim.png";
         }
      }
   }
}

group { name: "elm/button/base/controller_plus";
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   images {
      image: "tw_timepicker_dialbtn_right_plus.png" COMP;
      image: "tw_timepicker_dialbtn_right_normal.png" COMP;
      image: "tw_timepicker_dialbtn_right_pressed.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            image.normal: "tw_timepicker_dialbtn_right_normal.png";
         }
         description { state: "pressed" 0.0;
            image.normal: "tw_timepicker_dialbtn_right_pressed.png";
         }
      }
      part { name: "icon_image";
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "tw_timepicker_dialbtn_right_plus.png";
         }
      }
      part { name: "event";
         type: RECT;
         scale: 1;
         repeat_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              {
                  set_int(mouse_down, 1);
                  run_program(PROGRAM:"button_press1");
              }
         }
      }
      program { name: "button_press1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(mouse_down) == 1)
              {
                 set_int(mouse_down, 0);
                 get_state(PART:"event", st, 30, vl);
                 if (strcmp(st, "disabled")) {
                    set_state(PART:"bg", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
              }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(multi_down) == 0) {
               get_state(PART:"event", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  play_sample("touch_sound", 1.0);
                  emit("elm,action,click", "");
               }
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
         target: "bg";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
         target: "bg";
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/button/base/controller_minus";
   inherit: "elm/button/base/controller_plus";
   images {
      image: "tw_timepicker_dialbtn_left_minus.png" COMP;
      image: "tw_timepicker_dialbtn_left_normal.png" COMP;
      image: "tw_timepicker_dialbtn_left_pressed.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            image.normal: "tw_timepicker_dialbtn_left_normal.png";
         }
         description { state: "pressed" 0.0;
            image.normal: "tw_timepicker_dialbtn_left_pressed.png";
         }
      }
      part { name: "icon_image";
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "tw_timepicker_dialbtn_left_minus.png";
         }
      }
   }
}

group { name: "elm/button/base/fast_forward";
   inherit: "elm/button/base/plus";
   images {
      image: "tw_controller_btn_ff_normal.png" COMP;
      image: "tw_controller_btn_ff_press.png" COMP;
      image: "tw_controller_btn_ff_dim.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            image.normal: "tw_controller_btn_ff_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_ff_press.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_ff_dim.png";
         }
      }
   }
}

group { name: "elm/button/base/rewind";
   inherit: "elm/button/base/fast_forward";
   images {
      image: "tw_controller_btn_rw_normal.png" COMP;
      image: "tw_controller_btn_rw_press.png" COMP;
      image: "tw_controller_btn_rw_dim.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            image.normal: "tw_controller_btn_rw_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_rw_press.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_rw_dim.png";
         }
      }
   }
}

group { name: "elm/button/base/bottom_left";
   inherit: "elm/button/base/plus";
   images {
      image: "tw_timepicker_left_softbtn.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_BOTTOM_SIZE_LEFT;
            visible: 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "controller";
         description { state: "default" 0.0;
            image.normal: "tw_timepicker_left_softbtn.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_BOTTOM_PRESSED_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_BOTTOM_DIM_COLOR;
         }
      }
   }
}

group { name: "elm/button/base/bottom_right";
   inherit: "elm/button/base/bottom_left";
   images {
      image: "tw_timepicker_right_softbtn.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_BOTTOM_SIZE_RIGHT;
            visible: 0;
         }
      }
      part { name: "controller";
         description { state: "default" 0.0;
            image.normal: "tw_timepicker_right_softbtn.png";
         }
      }
   }
}

group { name: "elm/button/base/list_divider_btn";
   inherit: "elm/button/base/default";
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: LIST_BG_PRESSED_COLOR;
         }
      }
      part { name: "left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_DIVIDER_BTN_PADDING_LEFT_SIZE 0;
            max: BUTTON_DIVIDER_BTN_PADDING_LEFT_SIZE -1;
            fixed: 1 1;
            align: 0.0 0.5;
            rel1.to: "bg";
            rel2 {
               to: "bg";
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_DIVIDER_BTN_PADDING_RIGHT_SIZE 0;
            max: BUTTON_DIVIDER_BTN_PADDING_RIGHT_SIZE -1;
            fixed: 1 1;
            align: 1.0 0.5;
            rel1 {
               to: "bg";
               relative: 1.0 0.0;
            }
            rel2.to: "bg";
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "elm.swallow.content.clip";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_DIVIDER_BTN_ICON_SIZE 0;
            max: BUTTON_DIVIDER_BTN_ICON_SIZE -1;
            fixed: 1 1;
            align: 0.5 0.5;
            visible: 1;
            rel1 {
               to: "left_padding";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "right_padding";
               relative: 0.0 1.0;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "elm.swallow.content.clip";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;}
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_DIVIDER_BTN_ICON_DIM_COLOR;
         }
      }
      part { name: "event";
         type: RECT;
         scale: 1;
         repeat_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "default", 0.0);
               emit("elm,action,unpress", "");
            }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               play_sample("touch_sound", 1.0);
               emit("elm,action,click", "");
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
         target: "bg";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
         target: "bg";
      }
   }
}

group { name: "elm/button/base/calendar_next";
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   images {
      image: "b2_widget_contact_right_arrow.png" COMP;
   }

   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_SCHEDULE_SIZE;
            max: BUTTON_SCHEDULE_SIZE;
            fixed: 1 1;
            align: 1.0 0.5;
            color: BUTTON_SCHEDULE_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_SCHEDULE_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "controller";
         description { state: "default" 0.0;
            image.normal: "b2_widget_contact_right_arrow.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_CLIP_DISABLE_COLOR;
         }
      }
      part { name: "event";
         type: RECT;
         scale: 1;
         repeat_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              {
                  set_int(mouse_down, 1);
                  run_program(PROGRAM:"button_press1");
              }
         }
      }
      program { name: "button_press1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(mouse_down) == 1)
              {
                 set_int(mouse_down, 0);
                 get_state(PART:"event", st, 30, vl);
                 if (strcmp(st, "disabled")) {
                    set_state(PART:"bg", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
              }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            if (get_int(multi_down) == 0) {
               get_state(PART:"event", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  play_sample("touch_sound", 1.0);
                  emit("elm,action,click", "");
               }
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
         target: "bg";
         target: "controller";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
         target: "bg";
         target: "controller";
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/button/base/calendar_prev";
   inherit: "elm/button/base/calendar_next";
   images {
      image: "b2_widget_contact_left_arrow.png" COMP;
   }
   parts {
      part { name: "controller";
         description { state: "default" 0.0;
            image.normal: "b2_widget_contact_left_arrow.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_CLIP_DISABLE_COLOR;
         }
      }
   }
}

group { name: "elm/button/base/popup_controller_ff";
   images {
      image: "tw_controller_module_ff.png" COMP;
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: BUTTON_CONTROLLER_NORMAL_COLOR;
            min: BUTTON_CONTROLLER_SIZE;
            max: BUTTON_CONTROLLER_SIZE;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_DISABLE_COLOR;
         }
      }
      part { name: "image";
         type: IMAGE;
         scale: 1;
         clip_to: "clip";
         description { state: "default" 0.0;
            min: BUTTON_CONTROLLER_SIZE;
            max: BUTTON_CONTROLLER_SIZE;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "tw_controller_module_ff.png";
         }
      }
      part { name: "clip";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: BUTTON_CONTROLLER_CLIP_NORMAL_COLOR;
            rel1.to: "image";
            rel2.to: "image";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_CLIP_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_CONTROLLER_CLIP_DISABLE_COLOR;
         }
      }
      part { name: "event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               set_state(PART:"clip", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program{ name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "default", 0.0);
               set_state(PART:"clip", "default", 0.0);
               emit("elm,action,unpress", "");
            }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               play_sample("touch_sound", 1.0);
               emit("elm,action,click", "");
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "bg";
         target: "clip";
         target: "event";
         }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
         target: "clip";
         target: "event";
      }
   }
}

group { name: "elm/button/base/popup_controller_rw";
   inherit: "elm/button/base/popup_controller_ff";
   images {
      image: "tw_controller_module_rw.png" COMP;
   }
   parts {
      part { name: "image";
         type: IMAGE;
         scale: 1;
         clip_to: "clip";
         description { state: "default" 0.0;
            image.normal: "tw_controller_module_rw.png";
         }
      }
   }
}

group { name: "elm/button/base/popup_controller_close";
   inherit: "elm/button/base/popup_controller_ff";
   images {
      image: "tw_controller_module_close.png" COMP;
   }
   parts {
      part { name: "image";
         type: IMAGE;
         scale: 1;
         clip_to: "clip";
         description { state: "default" 0.0;
            image.normal: "tw_controller_module_close.png";
         }
      }
   }
}

#define BUTTON_MINI_ICON( PARAM, PRESS_IMAGE, IMAGE0 ) \
group { name: "elm/button/base/mini_icon/"PARAM; \
   script { \
      public mouse_down = 0; \
      public multi_down = 0; \
   } \
   images { \
      image: PRESS_IMAGE COMP; \
      image: IMAGE0 COMP; \
   } \
   parts { \
      part { name: "bg"; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_SIZE; \
            max: BUTTON_MINI_ICON_SIZE; \
            image.normal: PRESS_IMAGE; \
            visible: 0; \
         } \
         description { state: "pressed" 0.0; \
            inherit: "default"; \
            visible: 1; \
         } \
         description { state: "disabled" 0.0; \
            inherit: "default"; \
         } \
      } \
      part { name: "top_left_padding"; \
         type: SPACER; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_TOP_LEFT_PADDING_SIZE; \
            max: BUTTON_MINI_ICON_TOP_LEFT_PADDING_SIZE; \
            fixed: 1 1; \
            rel2.relative: 0.0 0.0; \
            align: 0.0 0.0; \
         } \
      } \
      part { name: "bottom_right_padding"; \
         type: SPACER; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_BOTTOM_RIGHT_PADDING_SIZE; \
            max: BUTTON_MINI_ICON_BOTTOM_RIGHT_PADDING_SIZE; \
            fixed: 1 1; \
            rel1.relative: 1.0 1.0; \
            align: 1.0 1.0; \
         } \
      } \
      part { name: "state_images"; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_ICON_SIZE; \
            max: BUTTON_MINI_ICON_ICON_SIZE; \
            fixed: 1 1; \
            rel1.to: "top_left_padding"; \
            rel2.to: "bottom_right_padding"; \
            image.normal: IMAGE0; \
         } \
      } \
      part { name: "event"; \
         type: RECT; \
         scale: 1; \
         mouse_events: 1; \
         description { state: "default" 0.0; \
            color: 0 0 0 0; \
         } \
      } \
   } \
   programs { \
      program { name: "pressed"; \
         signal: "mouse,down,1*"; \
         source: "event"; \
         script { \
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0)) \
              { \
                  set_int(mouse_down, 1); \
                  run_program(PROGRAM:"button_press1"); \
              } \
         } \
      } \
      program { name: "button_press1"; \
         script { \
            new st[31]; \
            new Float:vl; \
            get_state(PART:"event", st, 30, vl); \
            if (strcmp(st, "disabled")) { \
               set_state(PART:"bg", "pressed", 0.0); \
               emit("elm,action,press", ""); \
            } \
         } \
      } \
      program { name: "unpressed"; \
         signal: "mouse,up,1"; \
         source: "event"; \
         script { \
            new st[31]; \
            new Float:vl; \
            if (get_int(mouse_down) == 1) { \
               set_int(mouse_down, 0); \
               get_state(PART:"event", st, 30, vl); \
               if (strcmp(st, "disabled")) { \
                  set_state(PART:"bg", "default", 0.0); \
                  emit("elm,action,unpress", ""); \
               } \
            } \
         } \
      } \
      program { name: "clicked"; \
         signal: "mouse,clicked,1"; \
         source: "event"; \
         script { \
            new st[31]; \
            new Float:vl; \
            if (get_int(multi_down) == 0) { \
               get_state(PART:"event", st, 30, vl); \
               if (strcmp(st, "disabled")) { \
                  play_sample("touch_sound", 1.0); \
                  emit("elm,action,click", ""); \
               } \
            } \
         } \
      } \
      program { name: "disable"; \
         signal: "elm,state,disabled"; \
         source: "elm"; \
         action: STATE_SET "disabled" 0.0; \
         target: "event"; \
         target: "bg"; \
      } \
      program { name: "enable"; \
         signal: "elm,state,enabled"; \
         source: "elm"; \
         action: STATE_SET "default" 0.0; \
         target: "event"; \
         target: "bg"; \
      } \
      program { name: "multi_down"; \
         signal: "elm,action,multi,down"; \
         source: "elm"; \
         script { \
            set_int(multi_down, 1); \
         } \
      } \
      program { name: "multi_up"; \
         signal: "elm,action,multi,up"; \
         source: "elm"; \
         script { \
            set_int(multi_down, 0); \
         } \
      } \
   } \
}

#define BUTTON_MINI_ICON_TRIPLE_STATE( PARAM, PRESS_IMAGE, IMAGE0, IMAGE1, IMAGE2 ) \
group { name: "elm/button/base/mini_icon/triple_state/"PARAM; \
   images { \
      image: PRESS_IMAGE COMP; \
      image: IMAGE0 COMP; \
      image: IMAGE1 COMP; \
      image: IMAGE2 COMP; \
   } \
   script { \
      public current_state = 0; \
      public mouse_down = 0; \
      public multi_down = 0; \
   } \
   parts { \
      part { name: "bg"; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_SIZE; \
            max: BUTTON_MINI_ICON_SIZE; \
            image.normal: PRESS_IMAGE; \
            visible: 0; \
         } \
         description { state: "pressed" 0.0; \
            inherit: "default"; \
            visible: 1; \
         } \
         description { state: "disabled" 0.0; \
            inherit: "default"; \
         } \
      } \
      part { name: "top_left_padding"; \
         type: SPACER; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_TOP_LEFT_PADDING_SIZE; \
            max: BUTTON_MINI_ICON_TOP_LEFT_PADDING_SIZE; \
            fixed: 1 1; \
            rel2.relative: 0.0 0.0; \
            align: 0.0 0.0; \
         } \
      } \
      part { name: "bottom_right_padding"; \
         type: SPACER; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_BOTTOM_RIGHT_PADDING_SIZE; \
            max: BUTTON_MINI_ICON_BOTTOM_RIGHT_PADDING_SIZE; \
            fixed: 1 1; \
            rel1.relative: 1.0 1.0; \
            align: 1.0 1.0; \
         } \
      } \
      part { name: "state_images"; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_MINI_ICON_ICON_SIZE; \
            max: BUTTON_MINI_ICON_ICON_SIZE; \
            fixed: 1 1; \
            rel1.to: "top_left_padding"; \
            rel2.to: "bottom_right_padding"; \
            image.normal: IMAGE0; \
         } \
         description { state: "state1" 0.0; \
            inherit: "default" 0.0; \
            image.normal: IMAGE1; \
         } \
         description { state: "state2" 0.0; \
            inherit: "default" 0.0; \
            image.normal: IMAGE2; \
         } \
      } \
      part { name: "event"; \
         type: RECT; \
         scale: 1; \
         mouse_events: 1; \
         description { state: "default" 0.0; \
            color: 0 0 0 0; \
         } \
      } \
   } \
   programs { \
      program { name: "pressed"; \
         signal: "mouse,down,1*"; \
         source: "event"; \
         script { \
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0)) \
              { \
                  set_int(mouse_down, 1); \
                  run_program(PROGRAM:"button_press1"); \
              } \
         } \
      } \
      program { name: "button_press1"; \
         script { \
            new st[31]; \
            new Float:vl; \
            get_state(PART:"event", st, 30, vl); \
            if (strcmp(st, "disabled")) { \
               set_state(PART:"bg", "pressed", 0.0); \
               emit("elm,action,press", ""); \
            } \
         } \
      } \
      program { name: "unpressed"; \
         signal: "mouse,up,1"; \
         source: "event"; \
         script { \
            new st[31]; \
            new Float:vl; \
            if (get_int(mouse_down) == 1) { \
               set_int(mouse_down, 0); \
               get_state(PART:"event", st, 30, vl); \
               if (strcmp(st, "disabled")) { \
                  set_state(PART:"bg", "default", 0.0); \
                  emit("elm,action,unpress", ""); \
               } \
            } \
         } \
      } \
      program { name: "clicked"; \
         signal: "mouse,clicked,1"; \
         source: "event"; \
         script { \
            new st[31]; \
            new Float:vl; \
            new s; \
            if (get_int(multi_down) == 0) { \
               s = get_int(current_state); \
               get_state(PART:"event", st, 30, vl); \
               if (strcmp(st, "disabled")) { \
                  s = s + 1; \
                  if (s > 2) \
                     s = 0; \
                  set_int(current_state, s); \
                  if (s == 0) \
                     set_state(PART:"state_images", "default", 0.0); \
                  else if (s == 1) \
                     set_state(PART:"state_images", "state1", 0.0); \
                  else \
                     set_state(PART:"state_images", "state2", 0.0); \
                  play_sample("touch_sound", 1.0); \
                  emit("elm,action,click", ""); \
               } \
            } \
         } \
      } \
      program { name: "disable"; \
         signal: "elm,state,disabled"; \
         source: "elm"; \
         action: STATE_SET "disabled" 0.0; \
         target: "event"; \
         target: "bg"; \
      } \
      program { name: "enable"; \
         signal: "elm,state,enabled"; \
         source: "elm"; \
         action: STATE_SET "default" 0.0; \
         target: "event"; \
         target: "bg"; \
      } \
      program { name: "set_state0" ; \
         signal: "set,state,0"; \
         source: "*"; \
         script { \
            set_state(PART:"state_images", "default", 0.0); \
            set_int(current_state, 0); \
         } \
      } \
      program { name: "set_state1" ; \
         signal: "set,state,1"; \
         source: "*"; \
         script { \
            set_state(PART:"state_images", "state1", 0.0); \
            set_int(current_state, 1); \
         } \
      } \
      program { name: "set_state2" ; \
         signal: "set,state,2"; \
         source: "*"; \
         script { \
            set_state(PART:"state_images", "state2", 0.0); \
            set_int(current_state, 2); \
         } \
      } \
      program { name: "multi_down"; \
         signal: "elm,action,multi,down"; \
         source: "elm"; \
         script { \
            set_int(multi_down, 1); \
         } \
      } \
      program { name: "multi_up"; \
         signal: "elm,action,multi,up"; \
         source: "elm"; \
         script { \
            set_int(multi_down, 0); \
         } \
      } \
   } \
}

BUTTON_MINI_ICON(info,
   "b_music_mini_press.png", "b_music_mini_icon_info.png");

BUTTON_MINI_ICON_TRIPLE_STATE(bluetooth,
   "b_music_mini_press.png", "b_music_mini_icon_Bluetooth_on.png",
   "b_music_mini_icon_Bluetooth_off.png", "b_music_mini_icon_speak.png");
BUTTON_MINI_ICON_TRIPLE_STATE(repeat,
   "b_music_mini_press.png", "b_music_mini_icon_repeat_all.png",
   "b_music_mini_icon_repeat_one.png", "b_music_mini_icon_repeat_off.png");


#define BUTTON_ICON_CALL_MENU( PARAM, NORMAL_IMAGE, PRESS_IMAGE, DIM_IMAGE ) \
group { name: "elm/button/base/call/"PARAM; \
   inherit: "elm/button/base/default"; \
   images { \
      image: NORMAL_IMAGE COMP; \
      image: PRESS_IMAGE COMP; \
      image: DIM_IMAGE COMP; \
   } \
   parts { \
      part { name: "bg"; \
         type: IMAGE; \
         scale: 1; \
         description { state: "default" 0.0; \
            min: BUTTON_CALL_MENU_SIZE; \
            color: BUTTON_ICON_CALL_MENU_NORMAL_COLOR; \
            image.normal: NORMAL_IMAGE; \
         } \
         description { state: "pressed" 0.0; \
            inherit: "default" 0.0; \
            color: BUTTON_ICON_CALL_MENU_PRESSED_COLOR; \
            image.normal: PRESS_IMAGE; \
         } \
         description { state: "disabled" 0.0; \
            inherit: "default" 0.0; \
            color: BUTTON_ICON_CALL_MENU_DIM_COLOR; \
            image.normal: DIM_IMAGE; \
         } \
      } \
   } \
}

BUTTON_ICON_CALL_MENU(volume_mute,
   "b_call_volume_mute_normal.png", "b_call_volume_mute_pressed.png",
   "b_call_volume_mute_dim.png");
BUTTON_ICON_CALL_MENU(volume_mute_ongoing,
   "b_call_volume_mute_ongoing_normal.png", "b_call_volume_mute_ongoing_pressed.png",
   "b_call_volume_mute_ongoing_dim.png");
BUTTON_ICON_CALL_MENU(volume_swap,
   "b_call_volume_swap_normal.png", "b_call_volume_swap_pressed.png",
   "b_call_volume_swap_dim.png");
BUTTON_ICON_CALL_MENU(volume_tophone,
   "b_call_volume_tophone_normal.png", "b_call_volume_tophone_pressed.png",
   "b_call_volume_tophone_dim.png");
BUTTON_ICON_CALL_MENU(volume_transferto,
   "b_call_volume_transferto_normal.png", "b_call_volume_transferto_pressed.png",
   "b_call_volume_transferto_dim.png");
BUTTON_ICON_CALL_MENU(volume_towatch,
   "b_call_volume_towatch_normal.png", "b_call_volume_towatch_pressed.png",
   "b_call_volume_towatch_dim.png");
BUTTON_ICON_CALL_MENU(headset,
   "b_call_headset_normal.png", "b_call_headset_pressed.png",
   "b_call_headset_dim.png");
BUTTON_ICON_CALL_MENU(keypad,
   "b_call_keypad_normal.png", "b_call_keypad_pressed.png",
   "b_call_keypad_dim.png");
BUTTON_ICON_CALL_MENU(volume_unhold,
   "b_call_volume_unhold_normal.png", "b_call_volume_unhold_pressed.png",
   "b_call_volume_unhold_dim.png");
BUTTON_ICON_CALL_MENU(volume_hold,
   "b_call_volume_hold_normal.png", "b_call_volume_hold_pressed.png",
   "b_call_volume_hold_dim.png");

//device option
group { name: "elm/button/base/device_option";
   script {
      public mouse_down = 0;
      public multi_down = 0;
      public move = 0;
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_DEVICE_OPTION_SIZE;
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: LIST_BG_PRESSED_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: LIST_BG_DIM_COLOR;
         }
      }
      part { name: "top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0;
            min: 0 BUTTON_DEVICE_OPTION_TOP_PADDING_SIZE;
            rel2 {
               relative: 1.0 0.0;
            }
         }
      }
      part { name: "bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 1;
            min: 0 0;
            rel1 {
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "elm.swallow.content.clip";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: BUTTON_DEVICE_OPTION_ICON_SIZE;
            max: BUTTON_DEVICE_OPTION_ICON_SIZE;
            rel1 {
               to_y: "top_padding";
               relative: 0.0 1.0;
            }
            rel2 {
               to_y: "top_padding";
               relative: 1.0 1.0;
            }
         }
      }
      part { name: "text_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0 0.5;
            min: BUTTON_DEVICE_OPTION_LR_PADDING_SIZE 0;
            max: BUTTON_DEVICE_OPTION_LR_PADDING_SIZE -1;
            rel2 {
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "text_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1 0.5;
            min: BUTTON_DEVICE_OPTION_LR_PADDING_SIZE 0;
            max: BUTTON_DEVICE_OPTION_LR_PADDING_SIZE -1;
            rel1 {
               relative: 1.0 0.0;
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_DEVICE_OPTION_TEXT_PART_SIZE;
            fixed: 1 1;
            rel1 {
               to_x: "text_left_padding";
               to_y: "elm.swallow.content";
               relative: 1.0 1.0;
            }
            rel2 {
               to_x: "text_right_padding";
               to_y: "bottom_padding";
               relative: 0.0 0.0;
            }
            text {
               min: 0 1;
               align: 0.5 0.5;
               style: "button_popup_device_option_2_text_normal";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "button_popup_device_option_2_text_dim";
         }
      }
      part { name: "elm.swallow.content.clip";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0; }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_DEVICE_OPTION_SWALLOW_DIM_COLOR;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "bg";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              {
                  set_int(mouse_down, 1);
                  run_program(PROGRAM:"button_press1");
              }
         }
      }
      program { name: "button_press1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"bg", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "pressed", 0.0);
               emit("elm,action,press", "");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "bg";
         script {
            if (get_int(mouse_down) == 1) {
              set_int(mouse_down, 0);
              run_program(PROGRAM:"button_unpress1");
            }
         }
      }
      program { name: "button_unpress1";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"bg", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bg", "default", 0.0);
               emit("elm,action,unpress", "");
            }
         }
      }
      program { name: "button_move";
         signal: "mouse,move";
         source: "bg";
         script {
            if (get_int(mouse_down) == 1) {
               set_int(move, get_int(move)+1);
               if (get_int(move) > 15) {
                  set_int(move, 0);
                  set_int(mouse_down, 0);
                  run_program(PROGRAM:"button_unpress1");
               }
            }
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "bg";
         script {
            new st[31];
            new Float:vl;
            if (get_int(multi_down) == 0) {
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  play_sample("touch_sound", 1.0);
                  emit("elm,action,click", "");
               }
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.swallow.content.clip";
         target: "elm.text";
         target: "bg";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.content.clip";
         target: "elm.text";
         target: "bg";
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}
