/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group { name: "elm/notify/center/popup";
   alias: "elm/notify/center/2finger";
   parts {
      part { name: "base";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "persp";
         type: RECT;
         description { state: "default" 0.0;
            min: 32 32;
            max: 32 32;
            fixed: 1 1;
            align: 0.5 0.5;
            color: 0 0 0 0;
            visible: 1;
            perspective {
               zplane: -200;
               focal: 1000;
            }
         }
      }
      part { name: "persp1";
         type: RECT;
         description { state: "default" 0.0;
            min: 32 32;
            max: 32 32;
            fixed: 1 1;
            align: 0.5 0.5;
            visible: 1;
            color: 0 0 0 0;
            perspective {
               zplane: 0;
               focal: 1000;
            }
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: NOTIFY_SIZE;
            max: NOTIFY_SIZE;
            fixed: 1 1;
            map {
               on: 1;
               perspective: "persp";
               smooth: 0;
               color[0]: 1 1 1 1;
               color[1]: 1 1 1 1;
               color[2]: 1 1 1 1;
               color[3]: 1 1 1 1;
            }
         }
         description { state: "visible" 0.0;
            min: NOTIFY_SIZE;
            max: NOTIFY_SIZE;
            fixed: 1 1;
            map {
               on: 1;
               perspective: "persp1";
               smooth: 0;
            }
         }
         description { state: "end" 0.0;
            min: NOTIFY_SIZE;
            max: NOTIFY_SIZE;
            fixed: 1 1;
            map {
               on: 0;
               perspective: "persp1";
               smooth: 0;
            }
         }
      }
      part { name: "block";
         scale: 1;
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            fixed: 1 1;
            visible: 1;
            color: 0 0 0 0;
         }
         description { state: "end" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         action: STATE_SET "end" 0.0;
         target: "elm.swallow.content";
         target: "block";
      }
      program { name: "show";
         signal: "elm,action,show";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.content";
         target: "block";
      }
      program { name: "show_1";
         signal: "show";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.content";
         after: "end";
      }
      program { name: "end";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.content";
         transition: SIN_FAC 0.33 1.4;
         after: "end2";
      }
      program { name: "end2";
         action: STATE_SET "end" 0.0;
         target: "elm.swallow.content";
         target: "block";
         after: "showfinished";
      }
      program { name: "showfinished";
         action: SIGNAL_EMIT "elm,action,show,finished" "";
      }
      program { name: "hide";
         signal: "elm,action,hide";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.content";
      }
   }
}


group { name: "elm/notify/bottom/popup";
   alias: "elm/notify/bottom/toast";
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0; }
      }
   }
}

// FIXME: block events may be not used
group { name: "elm/notify/block_events/popup";
   parts {
      part { name: "block_events_color";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "show" 0.0;
            color: 0 0 0 255;
         }
         description { state: "clicked" 0.0;
            color: 0 0 0 255;
         }
      }
   }
   programs {
      program { name: "show";
         signal: "elm,action,show";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "block_events_color";
       }
      program { name: "show1";
         signal: "show";
         action: STATE_SET "show" 0.0;
         transition: SIN_FAC 0.33 0.5;
         target: "block_events_color";
      }
      program { name: "block_clicked";
         signal: "mouse,clicked,1";
         source: "block_events_color";
         action: SIGNAL_EMIT "elm,action,click" "elm";
         after: "deeper_block_color";
      }
      program {
         name: "deeper_block_color";
         action: STATE_SET "clicked" 0.0;
         target: "block_events_color";
         transition: LINEAR 0.2;
         after: "default_block_color";
      }
      program {
         name: "default_block_color";
         action: STATE_SET "show" 0.0;
         target: "block_events_color";
         transition: LINEAR 0.2;
      }
   }
}

group { name: "elm/label/base/popup/default";
   parts {
      part { name: "top_left_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_BODY_TEXT_PADDING_LEFT_SIZE POPUP_BODY_TEXT_PADDING_TOP_SIZE;
            max: POPUP_BODY_TEXT_PADDING_LEFT_SIZE POPUP_BODY_TEXT_PADDING_TOP_SIZE;
            fixed: 1 1;
            align: 0.0 0.0;
            rel2 {
               relative: 0.0 0.0;
            }
         }
      }
      part { name: "bottom_right_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_BODY_TEXT_PADDING_RIGHT_SIZE POPUP_BODY_TEXT_PADDING_TOP_SIZE;
            max: POPUP_BODY_TEXT_PADDING_RIGHT_SIZE POPUP_BODY_TEXT_PADDING_TOP_SIZE;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1 {
               relative: 1.0 1.0;
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            rel1 {
              to: "top_left_padding";
              relative: 1.0 1.0;
            }
            rel2 {
              to: "bottom_right_padding";
              relative: 0.0 0.0;
            }
            text {
               align: 0 0;
               style: "popup_body_default_font_style";
               min: 0 1;
            }
         }
      }
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
}

group { name: "elm/popup/buttons1/default";
   parts{
      part{ name:"actionbtn1";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0; }
      }
   }
}

group { name: "elm/popup/buttons2/default";
   parts{
      part { name: "c_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
          min: POPUP_BUTTON_CENTER_PADDING_SIZE 0;
          max: POPUP_BUTTON_CENTER_PADDING_SIZE -1;
          fixed: 1 0;
          align: 0.5 0.5;
        }
      }
      part{ name:"actionbtn1";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel2 {
              to_x: "c_padding";
              relative: 0.0 1.0;
            }
         }
      }
      part{ name:"actionbtn2";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
              to_x: "c_padding";
              relative: 1.0 0.0;
            }
         }
      }
   }
}


group { name: "elm/popup/content/default";
  alias:  "elm/popup/content/2finger";
   parts{
      part { name:"elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
         }
      }

   }
}

group { name: "elm/popup/base/default";

   images {
      image: "tw_popup_bg_holo_dark.png" COMP;
   }
   parts {
      part { name: "base";
         type: SPACER;
         description { state: "default" 0.0;
         }
      }
      part { name: "lt_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_PADDING_LT_SIZE;
            max: POPUP_PADDING_LT_SIZE;
            fixed: 1 1;
            align: 0.0 0.0;
            rel2.relative: 0.0 0.0;
         }
      }
      part { name: "rb_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_PADDING_RB_SIZE;
            max: POPUP_PADDING_RB_SIZE;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1.relative: 1.0 1.0;
         }
      }
      part { name: "text_title_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: POPUP_TEXT_PADDING_LEFT_SIZE 0;
            max: POPUP_TEXT_PADDING_LEFT_SIZE -1;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 {
               to_x: "lt_padding";
               relative: 1.0 0.0;
            }
            rel2 {
               to_x: "lt_padding";
               relative: 1.0 1.0;
            }
         }
      }
      part { name: "text_title_right_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_TEXT_PADDING_RIGHT_SIZE 0;
            max: POPUP_TEXT_PADDING_RIGHT_SIZE -1;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               to_x: "rb_padding";
               relative: 0.0 0.0;
            }
            rel2 {
               to_x: "rb_padding";
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            image {
               normal: "tw_popup_bg_holo_dark.png";
               border: POPUP_IMAGE_BORDER_SIZE;
               border_scale: 1;
            }
            rel1 {
               to: "lt_padding";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "rb_padding";
               relative: 0.0 0.0;
            }
         }
      }
      part { name: "elm.bg.title";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.5 0.0;
            min: 0 0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 POPUP_TITLE_HEIGHT;
            max: -1 POPUP_TITLE_HEIGHT;
            fixed: 0 1;
         }
      }
      part { name: "elm.text.title";
         type: TEXTBLOCK;
         scale:1;
         description { state: "default" 0.0;
            fixed: 1 0;
            rel1 {
              relative: 1.0 0.0;
              to_x: "text_title_left_padding";
              to_y: "elm.bg.title";
              offset: 0 POPUP_IMAGE_OFFSET_SIZE;
            }
            rel2 {
              relative: 0.0 1.0;
              to_x: "text_title_right_padding";
              to_y: "elm.bg.title";
              offset: 0 -1;
            }
            text {
              style: "popup_title_style";
              align: 0.0 0.5;
              min: 0 0;
            }
         }
      }
      part { name: "title_bottom_line";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 0;
            fixed: 1 1;
            align: 0.5 1;
            rel1.to: "elm.bg.title";
            rel2.to: "elm.bg.title";
            color: POPUP_TITLE_LINE_COLOR;
            visible: 0;
            rel1.offset: 0 -1;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            min: 308 1;
            max: 308 1;
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2 {
               relative: 1.0 0.0;
               to_x: "bg";
               to_y: "elm.bg.action_area";
            }
            rel1.offset: POPUP_IMAGE_OFFSET_SIZE POPUP_IMAGE_OFFSET_SIZE;
            rel2.offset: -POPUP_IMAGE_OFFSET_SIZE -POPUP_IMAGE_OFFSET_SIZE;
         }
         description { state: "below_title" 0.0;
            inherit: "default" 0.0;
            rel1 {
               relative: 0.0 1.0;
               to_x: "bg";
               to_y: "elm.bg.title";
            }
            rel2 {
               relative: 1.0 0.0;
               to_x: "bg";
               to_y: "elm.bg.action_area";
            }
            rel1.offset: POPUP_IMAGE_OFFSET_SIZE 0;
         }
         description { state: "below_title_show_actionarea" 0.0;
            inherit: "below_title" 0.0;
            rel2.offset: -POPUP_IMAGE_OFFSET_SIZE 0;
         }
         description { state: "show_actionarea" 0.0;
            inherit: "default" 0.0;
            rel2.offset: -POPUP_IMAGE_OFFSET_SIZE 0;
         }
      }
      part { name: "elm.bg.action_area";
         type: SPACER;
         scale : 1;
         description { state: "default" 0.0;
            fixed : 1 1;
            align: 0.5 1.0;
            rel1 {
               to: "bg";
               relative: 0.0 1.0;
            }
            rel2.to: "bg";
            min: 0 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 (POPUP_BUTTON_HEIGHT+POPUP_IMAGE_OFFSET_SIZE);
            max: -1 (POPUP_BUTTON_HEIGHT+POPUP_IMAGE_OFFSET_SIZE);
            fixed: 0 1;
         }
      }
      part { name: "elm.swallow.action_area";
         type: SWALLOW;
         scale : 1;
         description { state: "default" 0.0;
            align: 0.5 0.0;
            fixed: 1 1;
            rel1.to: "elm.bg.action_area";
            rel1.offset: POPUP_IMAGE_OFFSET_SIZE 0;
            rel2.to: "elm.bg.action_area";
            rel2.offset: -POPUP_IMAGE_OFFSET_SIZE-1 -1;
         }
      }
    }
    programs {
      program { name: show_title_area;
         signal: "elm,state,title_area,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"elm.bg.title", "visible", 0.0);
            set_state(PART:"title_bottom_line", "visible", 0.0);
            get_state(PART:"elm.swallow.content", st, 30, vl);
            set_state(PART:"elm.swallow.content", "below_title", 0.0);
            if (!strcmp(st, "default")) {
               set_state(PART:"elm.swallow.content", "below_title", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "below_title_show_actionarea", 0.0);
            }
         }
      }
      program { name: hide_title_area;
         signal: "elm,state,title_area,hidden";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"elm.bg.title", "default", 0.0);
            set_state(PART:"title_bottom_line", "default", 0.0);
            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "below_title")) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "show_actionarea", 0.0);
            }
         }
      }
      program { name: show_action_area;
         signal: "elm,state,action_area,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"elm.bg.action_area", "visible", 0.0);
            get_state(PART:"elm.swallow.content", st, 30, vl);
            // FIXME: duplicated state_set can make problem
            /*
            if (!strcmp(st, "default")) {
               set_state(PART:"elm.swallow.content", "show_actionarea", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "below_title_show_actionarea", 0.0);
            }*/
         }
      }
      program { name: hide_action_area;
         signal: "elm,state,action_area,hidden";
         source: "elm";
         action: STATE_SET "default" 0.0;
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"elm.bg.action_area", "default", 0.0);
            get_state(PART:"elm.swallow.content", st, 30, vl);
            // FIXME: duplicated state_set can make problem
            /*
            if (!strcmp(st, "show_actionarea")) {
               set_state(PART:"elm.swallow.content", "default", 0.0);
            } else {
               set_state(PART:"elm.swallow.content", "below_title", 0.0);
            }*/
         }
      }
   }
}

// FIXME: currently popup cannot resize this edje by it's min size.
group { name: "elm/popup/base/toast";
   images {
      image: "tw_popup_bg_holo_dark.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: POPUP_TOAST_BG_WIDTH 0;
            image {
               normal: "tw_popup_bg_holo_dark.png";
               border: POPUP_IMAGE_BORDER_SIZE;
               border_scale: 1;
            }
            rel1 {
              relative: 0.0 0.0;
              to_x: "title_left_padding";
              to_y: "title_top_padding";
            }
            rel2 {
              relative: 1.0 1.0;
              to_x: "title_right_padding";
              to_y: "title_bottom_padding";
            }
         }
      }
      part { name: "title_top_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            align: 0.5 1.0;
            min: 0 POPUP_TOAST_PADDING_TOP_SIZE;
            max: -1 POPUP_TOAST_PADDING_TOP_SIZE;
            rel1 {
               relative: 0.0 0.0;
               to_y: "elm.text";
            }
            rel2 {
               relative: 1.0 0.0;
               to_y: "elm.text";
            }
         }
      }
      part { name: "title_bottom_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: 0 POPUP_TOAST_TEXT_PADDING_BOTTOM_SIZE;
            max: -1 POPUP_TOAST_TEXT_PADDING_BOTTOM_SIZE;
            fixed: 0 1;
            align: 0.5 1.0;
            rel1 {
               relative: 0.0 0.0;
               to_y: "bottom_padding";
            }
            rel2 {
               relative: 0.1 0.0;
               to_y: "bottom_padding";
            }
         }
      }
      part { name: "bottom_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: 0 POPUP_TOAST_PADDING_BOTTOM_SIZE;
            max: -1 POPUP_TOAST_PADDING_BOTTOM_SIZE;
            fixed: 0 1;
            align: 0.5 1.0;
            rel1 {
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "title_left_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_TOAST_PADDING_LEFT_SIZE 0;
            max: POPUP_TOAST_PADDING_LEFT_SIZE -1;
            fixed: 1 0;
            align: 0.5 0.5;
            rel2 {
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "title_right_padding";
        type: SPACER;
        scale: 1;
        description { state: "default" 0.0;
            min: POPUP_TOAST_PADDING_RIGHT_SIZE 0;
            max: POPUP_TOAST_PADDING_RIGHT_SIZE -1;
            fixed: 1 0;
            align: 0.5 0.5;
            rel1 {
               relative: 1.0 0.0;
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.5 1.0;
            min: POPUP_TOAST_TEXT_WIDTH 0;
            rel1 {
              to_x: "title_left_padding";
              to_y: "title_bottom_padding";
              relative: 1.0 0.0;
            }
            rel2 {
              to_x: "title_right_padding";
              to_y: "title_bottom_padding";
              relative: 0.0 0.0;
            }
            text {
               style: "popup_toast_style";
               min: 0 1;
            }
         }
      }
   }
}

group { name: "elm/popup/base/2finger";
   images {
      image: "tw_popup_bg_holo_dark.png" COMP;
   }
   parts {
      part { name: "bg";
         scale: 1;
         description { state: "default" 0.0;
            min: POPUP_2FINGER_BG_MIN_SIZE;
            image {
               normal: "tw_popup_bg_holo_dark.png";
               border: POPUP_IMAGE_BORDER_SIZE;
               border_scale: 1;
            }
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0; }
      }
    }
  }

group { name: "elm/layout/2finger_popup/default";
  parts {
    part { name: "bg";
      type: SPACER;
      scale: 1;
      description { state: "default";
        min: POPUP_2FINGER_BG_MIN_SIZE;
      }
    }
    part { name: "indicator_top_left_padding";
       type: SPACER;
       scale: 1;
       description { state: "default" 0.0;
          min: POPUP_2FINGER_INDI_PADDING_SIZE POPUP_2FINGER_INDI_PADDING_SIZE;
          max: POPUP_2FINGER_INDI_PADDING_SIZE POPUP_2FINGER_INDI_PADDING_SIZE;
          fixed: 1 1;
          align: 0.0 0.0;
          rel2 { relative: 0.0 0.0; to: "bg"; }
       }
    }
    part { name: "indicator_right_padding";
       type: SPACER;
       scale: 1;
       description { state: "default" 0.0;
          min: POPUP_2FINGER_INDI_PADDING_SIZE 0;
          fixed: 1 0;
          align: 1.0 0.0;
          rel1 { relative: 1.0 0.0; to: "bg"; }
       }
    }
    part { name: "indicator_area_bg";
       type: RECT;
       scale: 1;
       description { state: "default" 0.0;
          min: 0 POPUP_2FINGER_INDI_MIN_MAX_SIZE;
          max: -1 POPUP_2FINGER_INDI_MIN_MAX_SIZE;
          fixed: 0 1;
          align: 0.0 0.0;
          rel1 { relative: 1.0 1.0; to: "indicator_top_left_padding"; }
          rel2 { relative: 0.0 1.0; to_x: "indicator_right_padding"; to_y: "indicator_top_left_padding"; }
          color: 0 0 0 255;
       }
    }
    part { name: "indicator_area";
       type: SWALLOW;
       scale: 1;
       description { state: "default" 0.0;
          rel1.to: "indicator_area_bg";
          rel2.to: "indicator_area_bg";
       }
    }
    part { name: "content_top_left_padding";
       type: SPACER;
       scale: 1;
       description { state: "default" 0.0;
          min: POPUP_2FINGER_CONTENT_PADDING_WIDTH POPUP_2FINGER_CONTENT_PADDING_HEIGHT;
          max: POPUP_2FINGER_CONTENT_PADDING_WIDTH POPUP_2FINGER_CONTENT_PADDING_HEIGHT;
          fixed: 1 1;
          align: 0.0 0.0;
          rel1 { relative: 0.0 1.0; to: "indicator_area"; }
          rel2 { relative: 0.0 1.0; to: "indicator_area"; }
       }
    }
    part { name: "content_bottom_right_padding";
       type: SPACER;
       scale: 1;
       description { state: "default" 0.0;
          min: POPUP_2FINGER_CONTENT_PADDING_WIDTH POPUP_2FINGER_CONTENT_PADDING_HEIGHT;
          max: POPUP_2FINGER_CONTENT_PADDING_WIDTH POPUP_2FINGER_CONTENT_PADDING_HEIGHT;
          fixed: 1 1;
          align: 1.0 1.0;
          rel1 { relative: 1.0 1.0; to: "bg"; }
       }
    }
    part { name: "elm.swallow.content";
       type: SWALLOW;
       scale: 1;
       description { state: "default" 0.0;
       align: 0.0 0.0;
          fixed: 1 1;
          rel1 {
            to: "content_top_left_padding";
            relative: 1.0 1.0;
          }
          rel2 {
            to: "content_bottom_right_padding";
            relative: 0.0 0.0;
          }
       }
    }
  }
}
