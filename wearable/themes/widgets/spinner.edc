/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group { name: "elm/spinner/base/volumestyle";
   alias: "elm/spinner/base/volume";
   images {
      image: "tw_controller_module_plus.png" COMP;
      image: "tw_controller_module_minus.png" COMP;
      image: "tw_number_controller_icon_ringtone_sound.png" COMP;
      image: "tw_number_controller_icon_ringtone_mute.png" COMP;
      image: "tw_number_controller_icon_ringtone_vibrate.png" COMP;
   }
   script {
      public plus_press_timer;
      public minus_press_timer;
      public plus_pressed;
      public minus_pressed;

      public plus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(plus_pressed);
         get_state(PART:"right.event", st, 30, vl);
         if (pressed) {
            set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
         } else if (strcmp(st, "disabled")) {
            set_state(PART:"right.image.plus", "default", 0.0);
            set_state(PART:"right.bg", "default", 0.0);
         }
      }

      public minus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(minus_pressed);
         get_state(PART:"left.event", st, 30, vl);
         if (pressed) {
            set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
         } else if(strcmp(st, "disabled")) {
            set_state(PART:"left.image.minus", "default", 0.0);
            set_state(PART:"left.bg", "default", 0.0);
         }
      }
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_HORIZONTAL_DEFAULT_BG_SIZE;
            max: SPINNER_HORIZONTAL_DEFAULT_BG_SIZE;
            color: 0 0 0 255;
         }
      }
      part { name: "left.bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "left.image.minus";
            rel2.to: "left.image.minus";
            color: SPINNER_MINUS_PLUS_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_DIM_COLOR;
         }
      }
      part { name: "left.image.minus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2 {
               relative: 0.0 1.0;
               to: "bg";
            }
            align: 0.0 0.5;
            min: SPINNER_ICON_LEFT_RIGHT_SIZE;
            max: SPINNER_ICON_LEFT_RIGHT_SIZE;
            image.normal: "tw_controller_module_minus.png";
            color: SPINNER_MINUS_PLUS_IMAGE_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_DISABLE_COLOR;
         }
      }
      part { name: "image_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "left.image.minus";
               relative: 1.0 0.0;
            }
            rel2.to: "left.image.minus";
            align: 0.0 0.5;
            min: SPINNER_IMAGE_LEFT_RIGHT_PADDING_SIZE;
            fixed: 1 0;
         }
      }
      part { name: "content_bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: SPINNER_CONTENT_BG_COLOR;
            min: SPINNER_CONTENT_BG_SIZE;
            max: SPINNER_CONTENT_BG_SIZE;
            rel1 {to: "image_left_padding"; relative: 1.0 0.0;}
            rel2 {to: "image_right_padding"; relative: 0.0 1.0;}
         }
      }
      part { name: "fake_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "content_bg";
            rel2 {to: "content_bg"; relative: 0.0 1.0;}
            min: SPINNER_CENTER_IMAGE_SIZE;
            max: SPINNER_CENTER_IMAGE_SIZE;
            align: 0.0 0.5;
            fixed: 1 1;
         }
      }
      part { name: "text_top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to: "fake_padding"; relative: 1.0 0.0;}
            rel2 {to_x: "content_bg"; to_y: "fake_padding"; relative: 1.0 0.0;}
            min: 0 SPINNER_TEXT_TOP_PADDING_HEIGHT;
            fixed: 1 1;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to_x: "fake_padding"; to_y: "text_top_padding"; relative: 1.0 1.0;}
            rel2 {to: "bottom_padding"; relative: 1.0 0.0;}
            color: SPINNER_TEXT_NORMAL_COLOR;
            text {
               font: "Tizen:style=Regular";
               size: SPINNER_TEXT_SIZE;
               min: 0 1;
               max: 1 1;
               text_class: "tizen";
            }
            fixed: 1 1;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_TEXT_FULL_COLOR;
         }
      }
      part { name: "bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to: "content_bg"; relative: 0.0 1.0;}
            rel2.to: "content_bg";
            align: 0.5 1.0;
            min: SPINNER_BOTTOM_PADDING_SIZE;
            max: SPINNER_BOTTOM_PADDING_SIZE;
            fixed: 1 1;
         }
      }
      part { name: "center.image";
         type: IMAGE;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2 {to: "elm.text"; relative: 0.0 1.0;}
            align: 1.0 0.5;
            color: SPINNER_CENTER_IMAGE_NORMAL_COLOR;
            min: SPINNER_CENTER_IMAGE_SIZE;
            max: SPINNER_CENTER_IMAGE_SIZE;
            image.normal: "tw_number_controller_icon_ringtone_sound.png";
            fixed: 1 1;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_CENTER_IMAGE_FULL_COLOR;
         }
         description { state: "zero" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_number_controller_icon_ringtone_mute.png";
            color: SPINNER_CENTER_IMAGE_MUTE_COLOR;
         }
         description { state: "vibrate" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_number_controller_icon_ringtone_vibrate.png";
            color: SPINNER_CENTER_IMAGE_VIBRATE_COLOR;
         }
      }
      part { name: "image_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2 {to: "right.image.plus"; relative: 0.0 1.0;}
            align: 0.0 0.5;
            min: SPINNER_IMAGE_LEFT_RIGHT_PADDING_SIZE;
            fixed: 1 0;
         }
      }
      part { name: "right.bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2.to: "right.image.plus";
            color: SPINNER_MINUS_PLUS_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_DIM_COLOR;
         }
      }
      part { name: "right.image.plus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "bg";
               relative: 1.0 0.0;
            }
            rel2.to: "bg";
            align: 1.0 0.5;
            min: SPINNER_ICON_LEFT_RIGHT_SIZE;
            max: SPINNER_ICON_LEFT_RIGHT_SIZE;
            image.normal: "tw_controller_module_plus.png";
            color: SPINNER_MINUS_PLUS_IMAGE_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_DISABLE_COLOR;
         }
      }
      part { name: "left.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "left.image.minus";
            rel2.to: "left.image.minus";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "center.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "content_bg";
            rel2.to: "content_bg";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "right.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2.to: "right.image.plus";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 0;
            visible: 1;
         }
      }
      part { name: "access";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2.to: "bg";
         }
      }
   }
   programs {
      program { name: "dec_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,start" "";
      }
      program { name: "dec_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,stop" "";
      }
      program { name: "inc_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,start" "";
      }
      program { name: "inc_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,stop" "";
      }
      program { name: "inc";
         signal: "mouse,down,1*";
         source: "right.event";
         script {
            new right_timer;
            new st[31];
            new Float:vl;

            get_state(PART:"right.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"right.image.plus", "pressed", 0.0);
               set_state(PART:"right.bg", "pressed", 0.0);
               right_timer = get_int(plus_press_timer);
               if (right_timer) {
                  cancel_timer(right_timer);
                  set_int(plus_press_timer, 0);
               }
               set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
               set_int(plus_pressed, 1);
               run_program(PROGRAM:"inc_start_signal_emit");
            }
         }
      }
      program { name: "inc2";
         signal: "mouse,up,1";
         source: "right.event";
         script {
            set_int(plus_pressed, 0);
         }
         after: "inc_stop_signal_emit";
      }
      program { name: "dec";
         signal: "mouse,down,1*";
         source: "left.event";
         script {
            new left_timer;
            new st[31];
            new Float:vl;

            get_state(PART:"left.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"left.image.minus", "pressed", 0.0);
               set_state(PART:"left.bg", "pressed", 0.0);
               left_timer = get_int(minus_press_timer);
               if (left_timer) {
                  cancel_timer(left_timer);
                  set_int(minus_press_timer, 0);
               }
               set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
               set_int(minus_pressed, 1);
               run_program(PROGRAM:"dec_start_signal_emit");
            }
         }
      }
      program { name: "dec2";
         signal: "mouse,up,1";
         source: "left.event";
         script {
            set_int(minus_pressed, 0);
         }
         after: "dec_stop_signal_emit";
      }
      program { name: "inc_cancel";
         signal: "elm,spinner,inc,cancel";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"center.image", st, 30, vl);
            if (!strcmp(st, "full")) {
               set_state(PART:"right.bg", "disabled", 0.0);
               set_state(PART:"right.image.plus", "disabled", 0.0);
               set_state(PART:"right.event", "disabled", 0.0);
            }
            else {
               set_state(PART:"right.bg", "default", 0.0);
               set_state(PART:"right.image.plus", "default", 0.0);
               set_state(PART:"right.event", "default", 0.0);
            }
         }
      }
      program { name: "dec_cancel";
         signal: "elm,spinner,dec,cancel";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"center.image", st, 30, vl);
            if (!strcmp(st, "zero")) {
               set_state(PART:"left.bg", "disabled", 0.0);
               set_state(PART:"left.image.minus", "disabled", 0.0);
               set_state(PART:"left.event", "disabled", 0.0);
            }
            else {
               set_state(PART:"left.bg", "default", 0.0);
               set_state(PART:"left.image.minus", "default", 0.0);
               set_state(PART:"left.event", "default", 0.0);
            }
         }
      }
      program { name: "rightbtn_enable";
         signal: "elm,spinner,rightbtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "right.image.plus";
         target: "right.bg";
         target: "right.event";
      }
      program { name: "rightbtn_disable";
         signal: "elm,spinner,rightbtn,disabled";
         source: "*";
         action:  STATE_SET "disabled" 0.0;
         target: "right.image.plus";
         target: "right.bg";
         target: "right.event";
      }
      program { name: "leftbtn_enable";
         signal: "elm,spinner,leftbtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "left.image.minus";
         target: "left.bg";
         target: "left.event";
      }
      program { name: "leftbtn_disable";
         signal: "elm,spinner,leftbtn,disabled";
         source: "*";
         action:  STATE_SET "disabled" 0.0;
         target: "left.image.minus";
         target: "left.bg";
         target: "left.event";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "default", 0.0);
            run_program(PROGRAM:"rightbtn_enable");
            run_program(PROGRAM:"leftbtn_enable");
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "disabled", 0.0);
            run_program(PROGRAM:"rightbtn_disable");
            run_program(PROGRAM:"leftbtn_disable");
         }
      }
      program { name: "full";
         signal: "elm,spinner,full";
         source: "elm";
         script {
            run_program(PROGRAM:"leftbtn_enable");
            set_state(PART:"center.image", "full", 0.0);
            set_state(PART:"elm.text", "full", 0.0);
            run_program(PROGRAM:"rightbtn_disable");
         }
      }
      program { name: "middle";
         signal: "elm,spinner,default";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"right.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"rightbtn_enable");
            }
            get_state(PART:"left.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"leftbtn_enable");
            }
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"center.image", "default", 0.0);
         }
      }
      program { name: "min";
         signal: "elm,spinner,min";
         source: "elm";
         script {
            run_program(PROGRAM:"rightbtn_enable");
            set_state(PART:"center.image", "zero", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
            run_program(PROGRAM:"leftbtn_disable");
         }
      }
      program { name: "vibrate";
         signal: "elm,spinner,vibrate";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"center.image", st, 30, vl);
            run_program(PROGRAM:"rightbtn_enable");
            if (strcmp(st, "vibrate")) {
               run_program(PROGRAM:"leftbtn_disable");
               set_state(PART:"center.image", "vibrate", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
            }
         }
      }
      program { name: "center_clicked";
         signal: "mouse,clicked,1";
         source: "center.event";
         action: SIGNAL_EMIT "elm,action,clicked" "";
      }
   }
}

group { name: "elm/spinner/base/brightnessstyle";
   alias: "elm/spinner/base/brightness";
   images {
      image: "tw_controller_module_plus.png" COMP;
      image: "tw_controller_module_minus.png" COMP;
      image: "tw_number_controller_icon_brightness.png" COMP;
      image: "tw_number_controller_icon_outdoor.png" COMP;
   }
   script {
      public plus_press_timer;
      public minus_press_timer;
      public plus_pressed;
      public minus_pressed;

      public plus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(plus_pressed);
         get_state(PART:"right.image.plus", st, 30, vl);
         if (pressed) {
            set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
         } else if (strcmp(st, "disabled")) {
            set_state(PART:"right.image.plus", "default", 0.0);
            set_state(PART:"right.bg", "default", 0.0);
         }
      }

      public minus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(minus_pressed);
         get_state(PART:"left.image.minus", st, 30, vl);
         if (pressed) {
            set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
         } else if(strcmp(st, "disabled")) {
            set_state(PART:"left.image.minus", "default", 0.0);
            set_state(PART:"left.bg", "default", 0.0);
         }
      }
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_HORIZONTAL_DEFAULT_BG_SIZE;
            max: SPINNER_HORIZONTAL_DEFAULT_BG_SIZE;
            color: 0 0 0 255;
         }
      }
      part { name: "left.bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "left.image.minus";
            rel2.to: "left.image.minus";
            color: SPINNER_MINUS_PLUS_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_DIM_COLOR;
         }
      }
      part { name: "left.image.minus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2 {
               relative: 0.0 1.0;
               to: "bg";
            }
            align: 0.0 0.5;
            min: SPINNER_ICON_LEFT_RIGHT_SIZE;
            max: SPINNER_ICON_LEFT_RIGHT_SIZE;
            image.normal: "tw_controller_module_minus.png";
            color: SPINNER_MINUS_PLUS_IMAGE_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_DISABLE_COLOR;
         }
      }
      part { name: "image_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "left.image.minus";
               relative: 1.0 0.0;
            }
            rel2.to: "left.image.minus";
            align: 0.0 0.5;
            min: SPINNER_IMAGE_LEFT_RIGHT_PADDING_SIZE;
            fixed: 1 0;
         }
      }
      part { name: "content_bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color: SPINNER_CONTENT_BG_COLOR;
            min: SPINNER_CONTENT_BG_SIZE;
            max: SPINNER_CONTENT_BG_SIZE;
            rel1 {to: "image_left_padding"; relative: 1.0 0.0;}
            rel2 {to: "image_right_padding"; relative: 0.0 1.0;}
         }
      }
      part { name: "fake_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "content_bg";
            rel2 {to: "content_bg"; relative: 0.0 1.0;}
            min: SPINNER_CENTER_IMAGE_SIZE;
            max: SPINNER_CENTER_IMAGE_SIZE;
            align: 0.0 0.5;
            fixed: 1 1;
         }
      }
      part { name: "text_top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to: "fake_padding"; relative: 1.0 0.0;}
            rel2 {to_x: "content_bg"; to_y: "fake_padding"; relative: 1.0 0.0;}
            min: 0 SPINNER_TEXT_TOP_PADDING_HEIGHT;
            fixed: 1 1;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to_x: "fake_padding"; to_y: "text_top_padding"; relative: 1.0 1.0;}
            rel2 {to: "bottom_padding"; relative: 1.0 0.0;}
            color: SPINNER_TEXT_NORMAL_COLOR;
            text {
               font: "Tizen:style=Regular";
               size: SPINNER_TEXT_SIZE;
               min: 0 1;
               max: 1 1;
               text_class: "tizen";
            }
            fixed: 1 1;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {to: "content_bg"; relative: 0.0 1.0;}
            rel2.to: "content_bg";
            align: 0.5 1.0;
            min: SPINNER_BOTTOM_PADDING_SIZE;
            max: SPINNER_BOTTOM_PADDING_SIZE;
            fixed: 1 1;
         }
      }
      part { name: "center.image";
         type: IMAGE;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2 {to: "elm.text"; relative: 0.0 1.0;}
            align: 1.0 0.5;
            color: SPINNER_CENTER_IMAGE_NORMAL_COLOR;
            min: SPINNER_CENTER_IMAGE_SIZE;
            max: SPINNER_CENTER_IMAGE_SIZE;
            image.normal: "tw_number_controller_icon_brightness.png";
            fixed: 1 1;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_number_controller_icon_outdoor.png";
         }
         description { state: "zero" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "image_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2 {to: "right.image.plus"; relative: 0.0 1.0;}
            align: 0.0 0.5;
            min: SPINNER_IMAGE_LEFT_RIGHT_PADDING_SIZE;
            fixed: 1 0;
         }
      }
      part { name: "right.bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2.to: "right.image.plus";
            color: SPINNER_MINUS_PLUS_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_DIM_COLOR;
         }
      }
      part { name: "right.image.plus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to: "bg";
               relative: 1.0 0.0;
            }
            rel2.to: "bg";
            align: 1.0 0.5;
            min: SPINNER_ICON_LEFT_RIGHT_SIZE;
            max: SPINNER_ICON_LEFT_RIGHT_SIZE;
            image.normal: "tw_controller_module_plus.png";
            color: SPINNER_MINUS_PLUS_IMAGE_NORMAL_COLOR;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_PRESS_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_MINUS_PLUS_IMAGE_DISABLE_COLOR;
         }
      }
      part { name: "left.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "left.image.minus";
            rel2.to: "left.image.minus";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "center.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "content_bg";
            rel2.to: "content_bg";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "right.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "right.image.plus";
            rel2.to: "right.image.plus";
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 0;
            visible: 1;
         }
      }
      part { name: "access";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2.to: "bg";
         }
      }
   }
   programs {
      program { name: "dec_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,start" "";
      }
      program { name: "dec_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,stop" "";
      }
      program { name: "inc_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,start" "";
      }
      program { name: "inc_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,stop" "";
      }
      program { name: "inc";
         signal: "mouse,down,1*";
         source: "right.event";
         script {
            new right_timer;
            new st[31];
            new Float:vl;

            get_state(PART:"right.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"right.image.plus", "pressed", 0.0);
               set_state(PART:"right.bg", "pressed", 0.0);
               right_timer = get_int(plus_press_timer);
               if (right_timer) {
                  cancel_timer(right_timer);
                  set_int(plus_press_timer, 0);
               }
               set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
               set_int(plus_pressed, 1);
               run_program(PROGRAM:"inc_start_signal_emit");
               play_sample("touch_sound", 1.0);
            }
         }
      }
      program { name: "inc2";
         signal: "mouse,up,1";
         source: "right.event";
         script {
            set_int(plus_pressed, 0);
         }
         after: "inc_stop_signal_emit";
      }
      program { name: "dec";
         signal: "mouse,down,1*";
         source: "left.event";
         script {
            new left_timer;
            new st[31];
            new Float:vl;

            get_state(PART:"left.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"left.image.minus", "pressed", 0.0);
               set_state(PART:"left.bg", "pressed", 0.0);
               left_timer = get_int(minus_press_timer);
               if (left_timer) {
                    cancel_timer(left_timer);
                    set_int(minus_press_timer, 0);
               }
               set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
               set_int(minus_pressed, 1);
               run_program(PROGRAM:"dec_start_signal_emit");
               play_sample("touch_sound", 1.0);
            }
         }
      }
      program { name: "dec2";
         signal: "mouse,up,1";
         source: "left.event";
         script {
            set_int(minus_pressed, 0);
         }
         after: "dec_stop_signal_emit";
      }
      program { name: "inc_cancel";
         signal: "elm,spinner,inc,cancel";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"center.image", st, 30, vl);
            if (!strcmp(st, "full")) {
               set_state(PART:"right.bg", "disabled", 0.0);
               set_state(PART:"right.image.plus", "disabled", 0.0);
               set_state(PART:"right.event", "disabled", 0.0);
            }
            else {
               set_state(PART:"right.bg", "default", 0.0);
               set_state(PART:"right.image.plus", "default", 0.0);
               set_state(PART:"right.event", "default", 0.0);
            }
         }
      }
      program { name: "dec_cancel";
         signal: "elm,spinner,dec,cancel";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"center.image", st, 30, vl);
            if (!strcmp(st, "zero")) {
               set_state(PART:"left.bg", "disabled", 0.0);
               set_state(PART:"left.image.minus", "disabled", 0.0);
               set_state(PART:"left.event", "disabled", 0.0);
            }
            else {
               set_state(PART:"left.bg", "default", 0.0);
               set_state(PART:"left.image.minus", "default", 0.0);
               set_state(PART:"left.event", "default", 0.0);
            }
         }
      }
      program { name: "rightbtn_enable";
         signal: "elm,spinner,rightbtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "right.image.plus";
         target: "right.bg";
         target: "right.event";
      }
      program { name: "rightbtn_disable";
         signal: "elm,spinner,rightbtn,disabled";
         source: "*";
         action:  STATE_SET "disabled" 0.0;
         target: "right.image.plus";
         target: "right.bg";
         target: "right.event";
      }
      program { name: "leftbtn_enable";
         signal: "elm,spinner,leftbtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "left.image.minus";
         target: "left.bg";
         target: "left.event";
      }
      program { name: "leftbtn_disable";
         signal: "elm,spinner,leftbtn,disabled";
         source: "*";
         action:  STATE_SET "disabled" 0.0;
         target: "left.image.minus";
         target: "left.bg";
         target: "left.event";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "default", 0.0);
            run_program(PROGRAM:"rightbtn_enable");
            run_program(PROGRAM:"leftbtn_enable");
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "disabled", 0.0);
            run_program(PROGRAM:"rightbtn_disable");
            run_program(PROGRAM:"leftbtn_disable");
         }
      }
      program { name: "full";
         signal: "elm,spinner,full";
         source: "elm";
         script {
            run_program(PROGRAM:"leftbtn_enable");
            set_state(PART:"center.image", "full", 0.0);
            set_state(PART:"elm.text", "full", 0.0);
            run_program(PROGRAM:"rightbtn_disable");
         }
      }
      program { name: "middle";
         signal: "elm,spinner,default";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"right.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"rightbtn_enable");
            }
            get_state(PART:"left.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"leftbtn_enable");
            }
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"center.image", "default", 0.0);
         }
      }
      program { name: "min";
         signal: "elm,spinner,min";
         source: "elm";
         script {
            run_program(PROGRAM:"rightbtn_enable");
            set_state(PART:"center.image", "zero", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
            run_program(PROGRAM:"leftbtn_disable");
         }
      }
      program { name: "center_clicked";
         signal: "mouse,clicked,1";
         source: "center.event";
         action: SIGNAL_EMIT "elm,action,clicked" "";
      }
   }
}

group { name: "elm/spinner/base/verticalstyle";
   alias: "elm/spinner/base/volume/vertical";
   images {
     image: "tw_button_controller_bg_100.png" COMP;
     image: "tw_button_controller_bg.png" COMP;
     image: "tw_button_controller_icon_mute.png" COMP;
     image: "tw_controller_btn_minus_normal.png" COMP;
     image: "tw_controller_btn_plus_normal.png" COMP;
     image: "tw_controller_btn_minus_pressed.png" COMP;
     image: "tw_controller_btn_plus_pressed.png" COMP;
     image: "tw_controller_btn_plus_dim.png" COMP;
     image: "tw_controller_btn_minus_dim.png" COMP;
   }
   script {
      public plus_press_timer;
      public minus_press_timer;
      public plus_pressed;
      public minus_pressed;

      public plus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(plus_pressed);
         get_state(PART:"top.image.plus", st, 30, vl);
         if (pressed) {
            set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
         } else if (strcmp(st, "disabled")) {
            set_state(PART:"top.image.plus", "default", 0.0);
         }
      }

      public minus_press_timer_cb(val) {
         new pressed;
         new st[31];
         new Float:vl;

         pressed = get_int(minus_pressed);
         get_state(PART:"bottom.image.minus", st, 30, vl);
         if (pressed) {
            set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
         } else if(strcmp(st, "disabled")) {
            set_state(PART:"bottom.image.minus", "default", 0.0);
         }
      }
   }
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_VERTICAL_DEFAULT_BG_SIZE;
         }
      }
      part { name: "top.image.plus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2 {to: "bg"; relative: 1.0 0.0;}
            align: 0.5 0.0;
            min: SPINNER_ICON_TOP_BOTTOM_SIZE;
            max: SPINNER_ICON_TOP_BOTTOM_SIZE;
            image.normal: "tw_controller_btn_plus_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_plus_pressed.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_plus_dim.png";
         }
      }
      part { name: "bottom.image.minus";
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               relative: 0.0 1.0;
               to: "bg";
            }
            rel2.to: "bg";
            align: 0.5 1.0;
            min: SPINNER_ICON_TOP_BOTTOM_SIZE;
            max: SPINNER_ICON_TOP_BOTTOM_SIZE;
            image.normal: "tw_controller_btn_minus_normal.png";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_minus_pressed.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            image.normal: "tw_controller_btn_minus_dim.png";
         }
      }
      part { name: "center.image.bg";
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            max: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "tw_button_controller_bg.png";
         }
      }
      part { name: "center.image2";
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            min: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            max: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "tw_button_controller_bg_100.png";
         }
      }
      part { name: "elm.text";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "center.image.bg";
            rel2.to: "center.image.bg";
            color: SPINNER_MUSIC_CONTROLLER_TEXT_COLOR;
            text {
               font: "Tizen:style=Regular";
               size: SPINNER_MUSIC_CONTROLLER_TEXT_SIZE;
               min: 0 0;
               text_class: "tizen";
            }
         }
         description { state: "zero" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "center.icon";
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            max: SPINNER_BUTTON_CONTROLLER_IMAGE_SIZE;
            fixed: 1 1;
            rel1.to: "center.image.bg";
            rel2.to: "center.image.bg";
            image.normal: "tw_button_controller_icon_mute.png";
            visible: 0;
         }
         description { state: "zero" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.dragable.slider";
         type: RECT;
         dragable {
            x: 0 0 0;
            y: 1 1 0;
         }
         description { state: "default" 0.0;
            visible: 0;
            fixed: 0 1;
            min: SPINNER_DRAGABLE_PART_MIN_SIZE;
            rel1 {
               to: "center.image.bg";
               relative: 0.0 1.0;
            }
            rel2 {
               to: "center.image.bg";
               relative: 1.0 1.0;
            }
            align: 1.0 0.0;
         }
      }
      part { name: "block.drag.events";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
      }
      part { name: "clipper";
         scale: 1;
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.dragable.slider";
            rel2.to: "elm.dragable.slider";
         }
      }
      part { name: "top.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "top.image.plus";
            rel2.to: "top.image.plus";
           color: SPINNER_EVENT_RECT_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "bottom.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bottom.image.minus";
            rel2.to: "bottom.image.minus";
           color: SPINNER_EVENT_RECT_COLOR;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "center.event";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "center.image.bg";
            rel2.to: "center.image.bg";
            color: SPINNER_EVENT_RECT_COLOR;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: SPINNER_DISABLED_COLOR;
            visible: 1;
         }
      }
      part { name: "access";
         type: RECT;
         repeat_events: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2.to: "bg";
         }
      }
   }
   programs {
      program { name: "dec_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,start" "";
      }
      program { name: "dec_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,decrement,stop" "";
      }
      program { name: "inc_start_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,start" "";
      }
      program { name: "inc_stop_signal_emit";
         action: SIGNAL_EMIT "elm,action,increment,stop" "";
      }
      program { name: "inc";
         signal: "mouse,down,1*";
         source: "top.event";
         script {
            new plus_timer;
            new st[31];
            new Float:vl;
            get_state(PART:"top.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"top.image.plus", "pressed", 0.0);

               plus_timer = get_int(plus_press_timer);
               if (plus_timer) {
                  cancel_timer(plus_timer);
                  set_int(plus_press_timer, 0);
               }
               set_int(plus_press_timer, timer(PRESS_TIMER_VAL, "plus_press_timer_cb", 0));
               set_int(plus_pressed, 1);
               run_program(PROGRAM:"inc_start_signal_emit");
            }
         }
      }
      program { name: "inc2";
         signal: "mouse,up,1";
         source: "top.event";
         script {
            set_int(plus_pressed, 0);
         }
         after: "inc_stop_signal_emit";
      }
      program { name: "dec";
         signal: "mouse,down,1*";
         source: "bottom.event";
         script {
            new minus_timer;
            new st[31];
            new Float:vl;
            get_state(PART:"bottom.event", st, 30, vl);
            if (strcmp(st, "disabled")) {
               set_state(PART:"bottom.image.minus", "pressed", 0.0);
               minus_timer = get_int(minus_press_timer);
               if (minus_timer) {
                  cancel_timer(minus_timer);
                  set_int(minus_press_timer, 0);
               }
               set_int(minus_press_timer, timer(PRESS_TIMER_VAL, "minus_press_timer_cb", 0));
               set_int(minus_pressed, 1);
               run_program(PROGRAM:"dec_start_signal_emit");
            }
         }
      }
      program { name: "dec2";
         signal: "mouse,up,1";
         source: "bottom.event";
         script {
            set_int(minus_pressed, 0);
         }
         after: "dec_stop_signal_emit";
      }
      program { name: "topbtn_enable";
         signal: "elm,spinner,topbtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "top.image.plus";
         target: "top.event";
      }
      program { name: "topbtn_disable";
         signal: "elm,spinner,topbtn,disabled";
         source: "*";
         action: STATE_SET "disabled" 0.0;
         target: "top.image.plus";
         target: "top.event";
      }
      program { name: "bottombtn_enable";
         signal: "elm,spinner,bottombtn,enabled";
         source: "*";
         action: STATE_SET "default" 0.0;
         target: "bottom.image.minus";
         target: "bottom.event";
      }
      program { name: "bottombtn_disable";
         signal: "elm,spinner,bottombtn,disabled";
         source: "*";
         action: STATE_SET "disabled" 0.0;
         target: "bottom.image.minus";
         target: "bottom.event";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "default", 0.0);
            run_program(PROGRAM:"topbtn_enable");
            run_program(PROGRAM:"bottombtn_enable");
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_state(PART:"disabler", "disabled", 0.0);
            run_program(PROGRAM:"topbtn_disable");
            run_program(PROGRAM:"bottombtn_disable");
         }
      }
      program { name: "full";
         signal: "elm,spinner,full";
         source: "elm";
         script {
            run_program(PROGRAM:"bottombtn_enable");
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"center.icon", "default", 0.0);
            run_program(PROGRAM:"topbtn_disable");
         }
      }
      program { name: "min";
         signal: "elm,spinner,min";
         source: "elm";
         script {
            run_program(PROGRAM:"topbtn_enable");
            set_state(PART:"elm.text", "zero", 0.0);
            set_state(PART:"center.icon", "zero", 0.0);
            run_program(PROGRAM:"bottombtn_disable");
         }
      }
      program { name: "middle";
         signal: "elm,spinner,default";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"top.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"topbtn_enable");
            }
            get_state(PART:"bottom.event", st, 30, vl);
            if(!strcmp(st, "disabled")) {
               run_program(PROGRAM:"bottombtn_enable");
            }
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"center.icon", "default", 0.0);
         }
      }
      program { name: "center_clicked";
         signal: "mouse,clicked,1";
         source: "center.event";
         action: SIGNAL_EMIT "elm,action,clicked" "";
      }
   }
}


